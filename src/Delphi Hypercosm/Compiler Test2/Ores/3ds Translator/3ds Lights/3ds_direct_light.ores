{***************************************************************}
{ |\  /|												We Put  }
{ | >< Hypercosm 		3ds_direct_light.ores			3d      }
{ |/  \|												To Work }
{***************************************************************}
{                                                               }
{   	Contains direct light definitions that correspond  		}
{		to entities from Discreet's 3D Studio Max software.		}
{                                                               }
{***************************************************************}
{                Copyright (c) 2004 Hypercosm, LLC.             }
{***************************************************************}


include "system/native_lights.ores";
include "system/native_shapes.ores";
include "system/marks.ores";


shape translated_3ds_direct_light
	from vector location = <0 0 0>;
	towards vector direction = <0 0 -1>; 
with
	// color and brightness parameters
	//
	color type color = white;
    scalar intensity = 1;
    scalar scale = 1;
    
    // state parameters
    //
    boolean on is true;
    boolean shadow is false;
    boolean visible is false;
is
	direction = normalized direction;
	
    if on then
        distant_light from direction with
            brightness = intensity;
            color = static color;
            shadows is shadow;
        	move to location;
        end;
    end;

	// draw direct light icon if visible
	//    
    if visible then
    	mark at location of circle as drawn in three_d with
			size = mark_size * scale;
    	    	
    		if on then
    			color = static color;
    		else
    			color = black;
    		end;
    	end;
    	
    	mark at location of x as drawn in three_d with
    		size = mark_size * scale * 2;
    		
    		if on then
    			color = static color;
    		else
    			color = black;
    		end;
    	end;
    	
		line [location (location + direction * scale)] with
    		if on then
    			global color = static color;
    		else
    			global color = black;
    		end;
		end;
    	
    	cylinder with
    		radius = intensity * scale / 2;
    		end1 = location;
    		end2 = location + direction * scale;
    		
    		if on then
    			global color = static color;
    		else
    			global color = black;
    		end;

    		render_mode is wireframe;
    		edges is silhouette;
    	end;    	
    end;
end;    // translated_3ds_direct_light


shape translated_targeted_direct_light
	from vector location;
	to vector target = <0 0 0>; 
with
	// color and brightness parameters
	//
	color type color = white;
    scalar intensity = 1;
    scalar scale = 1;
    
    // state parameters
    //
    boolean on is true;
    boolean shadow is false;
    boolean visible is false;
is
	translated_3ds_direct_light from location from location towards (target - location) with
	
		// set color and brightness parameters
		//
		color = static color;
		intensity = static intensity;
		scale = static scale;
		
	    // set state parameters
	    //
	    on is static on;
	    shadow is static shadow;
	    visible is static visible;		
	end;
end;	// translated_targeted_direct_light
