{***************************************************************}
{ |\  /|												We Put  }
{ | >< Hypercosm 			3ds_box.ores				3d      }
{ |/  \|												To Work }
{***************************************************************}
{                                                               }
{   	Contains box definitions that correspond to 			}
{		entities from Discreet's 3D Studio Max software.		}
{                                                               }
{***************************************************************}
{                Copyright (c) 2004 Hypercosm, LLC.             }
{***************************************************************}


include "system/3ds_textureable_object.ores";
include "system/3ds_editable_mesh.ores";
include "system/3ds_modifier_stacks.ores";
include "system/grid_meshes.ores";


final subject translated_3ds_box
extends
    translated_3ds_collapsable translated_3ds_texturable_object
does
    // constructor
    //
	verb new with
	
		// geometry parameters
		//
	    scalar length = 2;
	    scalar width = 2;
	    scalar height = 2;
	    
	    // tessellation parameters
	    //
	    integer length_segments = 1;
	    integer width_segments = 1;
	    integer height_segments = 1;
	    
        // texturing parameters
        //
        boolean gen_mapping_coords is false;
	end;

	//
	// attributes setting methods
	//
	verb set with
	
		// geometry parameters
		//
	    scalar length = 2;
	    scalar width = 2;
	    scalar height = 2;
	    
	    // tessellation parameters
	    //
	    integer length_segments = 1;
	    integer width_segments = 1;
	    integer height_segments = 1;
	    
        // texturing parameters
        //
        boolean gen_mapping_coords is false;
	end;
		
	// collapsable method
	//
	translated_3ds_stackable type question get_collapsed;
	
	// recycling methods
	//
	objective translated_3ds_box type question get;
	reference verb recycle;	
has
	// geometry attributes
	//
    scalar length;
    scalar width;
    scalar height;
    
    // tessellation attributes
    //
    integer length_segments;
    integer width_segments;
    integer height_segments;
    
private	
	// recycling attributes
	//
	translated_3ds_box type next is none;
is
    // recycling free list
    //
    translated_3ds_box type free_list is none;
    
    
    //
    // constructor
    //
    
    
	verb new with
	
		// geometry parameters
		//
	    scalar length = 2;
	    scalar width = 2;
	    scalar height = 2;
	    
	    // tessellation parameters
	    //
	    integer length_segments = 1;
	    integer width_segments = 1;
	    integer height_segments = 1;
	    
        // texturing parameters
        //
        boolean gen_mapping_coords is false;
	is
	    translated_3ds_texturable_object new with
	    
            // set texturing parameters
            //
	        gen_mapping_coords is static gen_mapping_coords;
	    end;

		if verbose_recycling then
			write "new 3ds box", ;
		end;
				    
		with translated_3ds_box do
		
			// set geometry attributes
			//
		    its length = length;
		    its width = width;
		    its height = height;
		    
		    // set tessellation attributes
		    //
		    its length_segments = length_segments;
		    its width_segments = width_segments;
		    its height_segments = height_segments;
	    end;
	end;	// new	


	//
	// attributes setting methods
	//
	
	
	verb set with
	
		// geometry parameters
		//
	    scalar length = 2;
	    scalar width = 2;
	    scalar height = 2;
	    
	    // tessellation parameters
	    //
	    integer length_segments = 1;
	    integer width_segments = 1;
	    integer height_segments = 1;
	    
        // texturing parameters
        //
        boolean gen_mapping_coords is false;
    is
		with translated_3ds_box do
     		
			// set geometry attributes
			//
		    its length = length;
		    its width = width;
		    its height = height;
		    
		    // set tessellation attributes
		    //
		    its length_segments = length_segments;
		    its width_segments = width_segments;
		    its height_segments = height_segments;
		    
            // set texturing parameters
            //
	        its gen_mapping_coords is gen_mapping_coords;
	    end;
	end;	// set
	
	
    //
	// collapsable method
	//
	
	
	translated_3ds_stackable type question get_collapsed is
		translated_3ds_editable_mesh type editable_mesh is translated_3ds_editable_mesh type's get;	
		boolean reversed is sign length * sign width * sign height < 0;
	    
	    // bottom
	    //
		editable_mesh add_element (get_rectangular_grid_mesh with
		    vertex = <(width / 2) (-length / 2) 0>;
		    side1 = <-width 0 0>;
		    side2 = <0 length 0>;
		    h_steps = width_segments;
		    v_steps = length_segments;
		    one_sided is true;
		    reversed is static reversed;
		    textured is gen_mapping_coords;
		);
		
		// top
		//
		editable_mesh add_element (get_rectangular_grid_mesh with
		    vertex = <-(width / 2) (-length / 2) height>;
		    side1 = <width 0 0>;
		    side2 = <0 length 0>;
		    h_steps = width_segments;
		    v_steps = length_segments;
		    one_sided is true;
		    reversed is static reversed;
		    textured is gen_mapping_coords;
		);
		
		// front side
		//	
		editable_mesh add_element (get_rectangular_grid_mesh with
		    vertex = <-(width / 2) (-length / 2) 0>;
		    side1 = <width 0 0>;
		    side2 = <0 0 height>;
		    h_steps = width_segments;
		    v_steps = height_segments;
		    one_sided is true;
		    reversed is static reversed;
		    textured is gen_mapping_coords;
		);
	
		// back side
		//	
		editable_mesh add_element (get_rectangular_grid_mesh with
		    vertex = <(width / 2) (length / 2) 0>;
		    side1 = <-width 0 0>;
		    side2 = <0 0 height>;
		    h_steps = width_segments;
		    v_steps = height_segments;
		    one_sided is true;
		    reversed is static reversed;
		    textured is gen_mapping_coords;
		);	
		
		// left side
		//
		editable_mesh add_element (get_rectangular_grid_mesh with
		    vertex = <(-width / 2) (length / 2) 0>;
		    side1 = <0 -length 0>;
		    side2 = <0 0 height>;
		    h_steps = length_segments;
		    v_steps = height_segments;
		    one_sided is true;
		    reversed is static reversed;
		    textured is gen_mapping_coords;
		);
		
		// right side
		//
		editable_mesh add_element (get_rectangular_grid_mesh with
		    vertex = <(width / 2) (-length / 2) 0>;
		    side1 = <0 length 0>;
		    side2 = <0 0 height>;
		    h_steps = length_segments;
		    v_steps = height_segments;
		    one_sided is true;
		    reversed is static reversed;
		    textured is gen_mapping_coords;
		);
		
		recycle;
		answer editable_mesh;
	end;	// get_collapsed
	
    	
	//	
	// recycling methods
	//
	
	
	objective translated_3ds_box type question get is
		if some free_list then
			
			// get from free list
			//
			translated_3ds_box type next is free_list;
			free_list is its next;
			
			answer next;
		else
			// create new
			//
			answer new translated_3ds_box;
		end;
	end;	// get
	
	
	reference verb recycle is
		
		// add to free list
		//
		next is free_list;
		free_list is translated_3ds_box;
		
		translated_3ds_box is none;
	end;		// recycle			
end;    // translated_3ds_box


//
// procedural interface
//


shape translated_3ds_box with

	// geometry parameters
	//
    scalar length = 2;
    scalar width = 2;
    scalar height = 2;
    
    // tessellation parameters
    //
    integer length_segments = 1;
    integer width_segments = 1;
    integer height_segments = 1;
    
    // texturing parameters
    //
    boolean gen_mapping_coords is false;
    
    // modifier stack
    //
	translated_3ds_box type translated_3ds_box is translated_3ds_box type's get;
	modifier_stack push translated_3ds_stackable type translated_3ds_box;
is
	// set first entry in modifier stack to object
	//
	translated_3ds_box set with
	
		// set geometry parameters
		//
	    length = static length;
	    width = static width;
	    height = static height;
	    
	    // set tessellation parameters
	    //
	    length_segments = static length_segments;
	    width_segments = static width_segments;
	    height_segments = static height_segments;
	    
	    // set texturing parameters
	    //
	    gen_mapping_coords is static gen_mapping_coords;    
	end;
	
	// render
	//
	modifier_stack instance;
end;	// translated_3ds_box
