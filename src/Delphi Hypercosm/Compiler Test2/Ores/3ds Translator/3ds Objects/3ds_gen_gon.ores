{***************************************************************}
{ |\  /|												We Put  }
{ | >< Hypercosm 		  3ds_gen_gon.ores				3d      }
{ |/  \|												To Work }
{***************************************************************}
{                                                               }
{   	Contains gen gon definitions that correspond to 		}
{		entities from Discreet's 3D Studio Max software.		}
{                                                               }
{***************************************************************}
{                Copyright (c) 2004 Hypercosm, LLC.             }
{***************************************************************}


include "system/3ds_textureable_object.ores";
include "system/3ds_editable_mesh.ores";
include "system/3ds_modifier_stacks.ores";
include "system/3ds_cylinder.ores";
include "system/tessellation.ores";


final subject translated_3ds_gen_gon
extends
    translated_3ds_collapsable translated_3ds_texturable_object
does
    // constructor
    //
	verb new with
	
		// geometry parameters
		//
		integer sides = 4;
		scalar radius = 25;
		scalar fillet = 10;
		scalar height = 25;
		
		// tessellation parameters
		//
		integer side_segments = 2;
		integer height_segments = 3;
		integer fillet_segments = 4;
		boolean smooth is true;
		
		// texturing parameters
		//
	    boolean gen_mapping_coords is false;
	end;

    // attributes setting methods
    //
	verb set with
	
		// geometry parameters
		//
		integer sides = 4;
		scalar radius = 25;
		scalar fillet = 10;
		scalar height = 25;
		
		// tessellation parameters
		//
		integer side_segments = 2;
		integer height_segments = 3;
		integer fillet_segments = 4;
		boolean smooth is true;
		
		// texturing parameters
		//
	    boolean gen_mapping_coords is false;
	end;
		
	// collapsable method
	//
	translated_3ds_stackable type question get_collapsed;
	
	// recycling methods
	//
	objective translated_3ds_gen_gon type question get;
	reference verb recycle;	
has
	// geometry attributes
	//
	integer sides;
	scalar radius;
	scalar fillet;
	scalar height;
	
	// tessellation attributes
	//
	integer side_segments;
	integer height_segments;
	integer fillet_segments;
	boolean smooth;
	
private	
	// recycling attributes
	//
	translated_3ds_gen_gon type next is none;
is
    // recycling free list
    //
    translated_3ds_gen_gon type free_list is none;
    
    
    //
    // constructor
    //
    
    
	verb new with
	
		// geometry parameters
		//
		integer sides = 4;
		scalar radius = 25;
		scalar fillet = 10;
		scalar height = 25;
		
		// tessellation parameters
		//
		integer side_segments = 2;
		integer height_segments = 3;
		integer fillet_segments = 4;
		boolean smooth is true;
		
		// texturing parameters
		//
	    boolean gen_mapping_coords is false;
	is
	    translated_3ds_texturable_object new with
	    
            // set texturing parameters
            //
	        gen_mapping_coords is static gen_mapping_coords;
	    end;

		if verbose_recycling then
			write "new 3ds gen gon", ;
		end;
		
		// clamp tessellation to minimum value
		//
		if sides < min_circle_tessellation then
			sides = min_circle_tessellation;
		end;
				    
		with translated_3ds_gen_gon do
		
			// set geometry attributes
			//
			its sides = sides;
			its radius = radius;
			its fillet = fillet;
			its height = height;
			
			// set tessellation attributes
			//
			its side_segments = side_segments;
			its height_segments = height_segments;
			its fillet_segments = fillet_segments;
			its smooth is smooth;
	    end;
	end;	// new	


	//
    // attributes setting methods
    //
    
    
	verb set with
	
		// geometry parameters
		//
		integer sides = 4;
		scalar radius = 25;
		scalar fillet = 10;
		scalar height = 25;
		
		// tessellation parameters
		//
		integer side_segments = 2;
		integer height_segments = 3;
		integer fillet_segments = 4;
		boolean smooth is true;
		
		// texturing parameters
		//
	    boolean gen_mapping_coords is false;
	is
		// clamp tessellation to minimum value
		//
		if sides < min_circle_tessellation then
			sides = min_circle_tessellation;
		end;
		
		with translated_3ds_gen_gon do
		
			// set geometry attributes
			//
			its sides = sides;
			its radius = radius;
			its fillet = fillet;
			its height = height;
			
			// set tessellation attributes
			//
			its side_segments = side_segments;
			its height_segments = height_segments;
			its fillet_segments = fillet_segments;
			its smooth is smooth;
			
            // set texturing parameters
            //
	        its gen_mapping_coords is gen_mapping_coords;
	    end;	
	end;	// set	
	
	
    //
	// collapsable method
	//
	
	
	translated_3ds_stackable type question get_collapsed is
		translated_3ds_editable_mesh type editable_mesh is translated_3ds_editable_mesh type's get;
        translated_3ds_editable_mesh type part_mesh is none;			
		trans type part_trans;
		mesh type mesh is none;
				
		scalar angle = 360 / sides;
		scalar radius_of_curvature = fillet / tan (angle / 2);
		scalar length = sin (angle / 2) * radius;
		scalar side_offset = cos (angle / 2) * radius;
		scalar corner_offset = radius * (side_offset - radius_of_curvature) / side_offset; 
		scalar side_length = length - radius_of_curvature * tan (angle / 2);
		vector points[0 .. sides * 4 - 1];
		vector cap_grid[0 .. 1, 0 .. sides * 4 - 1];
	
		translated_3ds_editable_mesh type question corner with
	        boolean gen_mapping_coords is false;
		is
			translated_3ds_cylinder type translated_3ds_cylinder is
				translated_3ds_cylinder type's get;
				
			translated_3ds_cylinder set with
			    radius = radius_of_curvature;
			    height = static height;
			    height_segments = static height_segments;
			    cap_segments = 1;
			    sides = fillet_segments;
			    smooth is static smooth;
			    slice_on is true;
			    slice_from = angle / 2;
			    slice_to = -angle / 2;
			    gen_mapping_coords is static gen_mapping_coords;
			    capping is true;
			    slice_capping is false;
			end;
			
			answer to_translated_3ds_editable_mesh of translated_3ds_cylinder;
		end;	// corner
			
		mesh type question side with
	        boolean gen_mapping_coords is false;
		is
			answer (get_rectangular_grid_mesh with
			    vertex = <0 -side_length 0>;
			    side1 = <0 (side_length * 2) 0>;
			    side2 = <0 0 height>;
			    h_steps = side_segments;
			    v_steps = height_segments;
			    one_sided is true;
			    reversed is (height < 0);
			    smoothing is smooth;
			    textured is static gen_mapping_coords;
			);		
		end;	// side
	
		vector offset = <(cos (angle / 2)) (sin (angle / 2)) 0> * radius_of_curvature;
		vector point1 = <corner_offset 0 0>;
		vector point2 = point1 + offset;
		vector point3 = (rotated_vector point1 by angle around <0 0 1>) + offset;
		vector point4 = rotated_vector point1 by angle around <0 0 1>;
				
		for integer counter = 0 .. sides - 1 do
			scalar t = counter / sides;
			scalar rotation = t * 360;
			
			part_mesh is (corner with
				gen_mapping_coords is static gen_mapping_coords;

	    	    // create part transformation
	    	    //
	    	    part_trans = unit_trans;		
				move the part_trans to <corner_offset 0 0>;
				rotate the part_trans by rotation around <0 0 1>;
			);
			if some part_mesh then
			    part_mesh transform from part_trans;
			    editable_mesh add_editable_mesh_elements of part_mesh;
			    part_mesh recycle;
		    end;
	    			
			mesh is (side with
				gen_mapping_coords is static gen_mapping_coords;

	    	    // create part transformation
	    	    //
	    	    part_trans = unit_trans;			    
				move the part_trans to <side_offset 0 0>;
				rotate the part_trans by rotation + (angle / 2) around <0 0 1>;
			);
			if some mesh then
			    mesh transform from part_trans;
			    editable_mesh add_element mesh;
		    end;
		    				
			points[counter * 4] = rotated_point point1 by rotation around <0 0 1>;
			points[counter * 4 + 1] = rotated_point point2 by rotation around <0 0 1>;
			points[counter * 4 + 2] = rotated_point point3 by rotation around <0 0 1>;
			points[counter * 4 + 3] = rotated_point point4 by rotation around <0 0 1>;
		end;
		
		// bottom and top caps
		//
		
		for integer counter = 0 .. sides * 4 - 1 do
			cap_grid[0, counter] = <0 0 0>;
			cap_grid[1, counter] = points[counter];
		end;
		
		editable_mesh add_element (get_grid_mesh of cap_grid with
			smoothing is smooth;
			closed is true;
			reversed is (height < 0);
			textured is gen_mapping_coords;
		);
		
		for each vector point in cap_grid do
			point = itself + <0 0 height>;
		end;
		
		editable_mesh add_element (get_grid_mesh of cap_grid with
			smoothing is smooth;
			closed is true;
			reversed is (height > 0);
			textured is gen_mapping_coords;	
		);
		
		recycle;
		answer editable_mesh;
	end;	// get_collapsed
	
	
	//	
	// recycling methods
	//
	
	
	objective translated_3ds_gen_gon type question get is
		if some free_list then
		
			// get from free list
			//
			translated_3ds_gen_gon type next is free_list;
			free_list is its next;
			
			answer next;
		else
			// create new
			//
			answer new translated_3ds_gen_gon;
		end;
	end;	// get
	
	
	reference verb recycle is
	
		// add to free list
		//
		next is free_list;
		free_list is translated_3ds_gen_gon;
		
		translated_3ds_gen_gon is none;
	end;		// recycle			
end;    // translated_3ds_gen_gon


//
// procedural interface
//


shape translated_3ds_gen_gon with
    
	// geometry parameters
	//
	integer sides = 4;
	scalar radius = 25;
	scalar fillet = 10;
	scalar height = 25;
	
	// tessellation parameters
	//
	integer side_segments = 2;
	integer height_segments = 3;
	integer fillet_segments = 4;
	boolean smooth is true;
	
	// texturing parameters
	//
    boolean gen_mapping_coords is false;
	    
    // modifier stack
    //
	translated_3ds_gen_gon type translated_3ds_gen_gon is translated_3ds_gen_gon type's get;
	modifier_stack push translated_3ds_stackable type translated_3ds_gen_gon;
is
	// set first entry in modifier stack to object
	//
	translated_3ds_gen_gon set with

		// set geometry parameters
		//
		sides = static sides;
		radius = static radius;
		fillet = static fillet;
		height = static height;
		
		// set tessellation parameters
		//
		side_segments = static side_segments;
		height_segments = static height_segments;
		fillet_segments = static fillet_segments;
		smooth is static smooth;
		
		// set texturing parameters
		//
	    gen_mapping_coords is static gen_mapping_coords;	
	end;
	
	// render
	//
	modifier_stack instance;
end;	// translated_3ds_gen_gon
