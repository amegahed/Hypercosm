{***************************************************************}
{ |\  /|												We Put  }
{ | >< Hypercosm 		  3ds_oil_tank.ores			    3d      }
{ |/  \|												To Work }
{***************************************************************}
{                                                               }
{   	Contains oil_tank definitions that correspond to 		}
{		entities from Discreet's 3D Studio Max software.		}
{                                                               }
{***************************************************************}
{                Copyright (c) 2004 Hypercosm, LLC.             }
{***************************************************************}


include "system/3ds_sliceable_object.ores";
include "system/3ds_modifier_stacks.ores";
include "system/3ds_sphere.ores";
include "system/3ds_cylinder.ores";


final subject translated_3ds_oil_tank
extends
    translated_3ds_collapsable translated_3ds_sliceable_object
does
    // constructor
    //
	verb new with
	
		// geometry parameters
		//
	    scalar radius = 1;
	    scalar height = 2;
	    scalar cap_height = .5;
		scalar blend = .25;
		
		// tessellation parameters
		//
		integer sides = 16;
		integer height_segments = 1;
		boolean smooth is true;
		
		// slicing parameters
		//
	    boolean slice_on is false;
	    scalar slice_from = 0;
	    scalar slice_to = 0;
	    
	    // texturing parameters
	    //
	    boolean gen_mapping_coords is false;
	        
	    // additional parameters that
	    // are not provided by 3DS Max
	    //
	    boolean capping is true;
	end;

    // attributes setting method
    //
	verb set with
	
		// geometry parameters
		//
	    scalar radius = 1;
	    scalar height = 2;
	    scalar cap_height = .5;
		scalar blend = .25;
		
		// tessellation parameters
		//
		integer sides = 16;
		integer height_segments = 1;
		boolean smooth is true;
		
		// slicing parameters
		//
	    boolean slice_on is false;
	    scalar slice_from = 0;
	    scalar slice_to = 0;
	    
	    // texturing parameters
	    //
	    boolean gen_mapping_coords is false;
	        
	    // additional parameters that
	    // are not provided by 3DS Max
	    //
	    boolean capping is true;
	end;	
	
	// collapsable method
	//
	translated_3ds_stackable type question get_collapsed;
	
	// recycling methods
	//
	objective translated_3ds_oil_tank type question get;
	reference verb recycle;	
has
	// geometry attributes
	//
    scalar radius;
    scalar height;
    scalar cap_height;
	scalar blend;
	
	// tessellation attributes
	//
	integer sides;
	integer height_segments;
	boolean smooth;
        
    // additional attributes that
    // are not provided by 3DS Max
    //
    boolean capping;
    
private	
	// recycling attributes
	//
	translated_3ds_oil_tank type next is none;
is
    // recycling free list
    //
    translated_3ds_oil_tank type free_list is none;
    
    
    //
    // constructor
    //
    
    
	verb new with
	
		// geometry parameters
		//
	    scalar radius = 1;
	    scalar height = 2;
	    scalar cap_height = .5;
		scalar blend = .25;
		
		// tessellation parameters
		//
		integer sides = 16;
		integer height_segments = 1;
		boolean smooth is true;
		
		// slicing parameters
		//
	    boolean slice_on is false;
	    scalar slice_from = 0;
	    scalar slice_to = 0;
	    
	    // texturing parameters
	    //
	    boolean gen_mapping_coords is false;
	        
	    // additional parameters that
	    // are not provided by 3DS Max
	    //
	    boolean capping is true;
	is
	    translated_3ds_sliceable_object new with

        	// set slicing parameters
        	//
            slice_on is static slice_on;
            slice_from = static slice_from;
            slice_to = static slice_to;
            	    
            // set texturing parameters
            //
	        gen_mapping_coords is static gen_mapping_coords;
	    end;

		if verbose_recycling then
			write "new 3ds oil tank", ;
		end;
				    
		with translated_3ds_oil_tank do
		
			// set geometry attributes
			//
		    its radius = radius;
		    its height = height;
		    its cap_height = cap_height;
			its blend = blend;
			
			// set tessellation attributes
			//
			its sides = sides;
			its height_segments = height_segments;
			its smooth is smooth;
		        
		    // set additional attributes that
		    // are not provided by 3DS Max
		    //
		    its capping is capping;
	    end;
	end;	// new	


	//
    // attributes setting method
    //
    
    
	verb set with
	
		// geometry parameters
		//
	    scalar radius = 1;
	    scalar height = 2;
	    scalar cap_height = .5;
		scalar blend = .25;
		
		// tessellation parameters
		//
		integer sides = 16;
		integer height_segments = 1;
		boolean smooth is true;
		
		// slicing parameters
		//
	    boolean slice_on is false;
	    scalar slice_from = 0;
	    scalar slice_to = 0;
	    
	    // texturing parameters
	    //
	    boolean gen_mapping_coords is false;
	        
	    // additional parameters that
	    // are not provided by 3DS Max
	    //
	    boolean capping is true;
	is
		with translated_3ds_oil_tank do
		
			// set geometry attributes
			//
		    its radius = radius;
		    its height = height;
		    its cap_height = cap_height;
			its blend = blend;
			
			// set tessellation attributes
			//
			its sides = sides;
			its height_segments = height_segments;
			its smooth is smooth;
		        
		    // set additional attributes that
		    // are not provided by 3DS Max
		    //
		    its capping is capping;
		    
        	// set slicing parameters
        	//
            its slice_on is slice_on;
            its slice_from = slice_from;
            its slice_to = slice_to;
            	    
            // set texturing parameters
            //
	        its gen_mapping_coords is gen_mapping_coords;
	    end;	
	end;	// set
	
		
    //
	// collapsable method
	//
		
			
	translated_3ds_stackable type question get_collapsed is
		translated_3ds_editable_mesh type editable_mesh is translated_3ds_editable_mesh type's get;
        translated_3ds_editable_mesh type part_mesh is none;			
		trans type part_trans;
				
		scalar distance = (sqr radius - sqr cap_height) / (2 * cap_height);
		scalar radius_of_curvature = distance + cap_height;
		scalar angle = atan (radius / distance);
		
        translated_3ds_cylinder type translated_3ds_cylinder is none;
		translated_3ds_sphere type translated_3ds_sphere is none;
		
		// sides
		//	
        translated_3ds_cylinder is translated_3ds_cylinder type's get;
        translated_3ds_cylinder set with			
		    radius = static radius;
		    height = abs static height - (abs cap_height * 2);
		    height_segments = static height_segments;
		    cap_segments = 0;
		    sides = static sides;
		    smooth is static smooth;
		    slice_on is static slice_on;
		    slice_from = static slice_from;
		    slice_to = static slice_to;
		    gen_mapping_coords is static gen_mapping_coords;
		    capping is static capping;

    	    // create part transformation
    	    // 				    
		    part_trans = unit_trans;
		    move the part_trans to <0 0 abs cap_height>;
		    if static height < 0 then
		    	move the part_trans to <0 0 static height>;
		    end;
		end;
		part_mesh is to_translated_3ds_editable_mesh of translated_3ds_cylinder;
		translated_3ds_cylinder recycle;
	    part_mesh transform from part_trans;
	    editable_mesh add_editable_mesh_elements of part_mesh;
	    part_mesh recycle;		

		// upper cap
		//
		translated_3ds_sphere is translated_3ds_sphere type's get;
		translated_3ds_sphere set with
		    radius = radius_of_curvature;
		    segments = sides;
		    smooth is static smooth;
		    hemi = ((90 - angle) + 90) / 180;
		    squash is false;
		    slice_on is static slice_on;
		    slice_from = static slice_from;
		    slice_to = static slice_to;
		    gen_mapping_coords is static gen_mapping_coords;
		    capping is static capping;
		    hemi_capping is false;
		    
    	    // create part transformation
    	    // 			    
		    part_trans = unit_trans;
		    move the part_trans to <0 0 -distance>;
		    rotate the part_trans by -90 around <0 0 1>;
			move the part_trans to <0 0 (abs height - abs cap_height)>;
		    if static height < 0 then
		    	move the part_trans to <0 0 static height>;
		    end;		    
		end;
        part_mesh is to_translated_3ds_editable_mesh of translated_3ds_sphere;
        translated_3ds_sphere recycle;
	    part_mesh transform from part_trans;
	    editable_mesh add_editable_mesh_elements of part_mesh;
	    part_mesh recycle;

		// lower cap
		//
		translated_3ds_sphere is translated_3ds_sphere type's get;	    		
		translated_3ds_sphere set with
		    radius = radius_of_curvature;
		    segments = sides;
		    smooth is static smooth;
		    hemi = -((90 - angle) + 90) / 180;
		    squash is false;
		    slice_on is static slice_on;
		    slice_from = static slice_from;
		    slice_to = static slice_to;
		    gen_mapping_coords is static gen_mapping_coords;
		    capping is static capping;
		    hemi_capping is false;
		    
    	    // create part transformation
    	    // 
		    part_trans = unit_trans;
		    move the part_trans to <0 0 distance>;
		    rotate the part_trans by -90 around <0 0 1>;
			move the part_trans to <0 0 abs cap_height>;
		    if static height < 0 then
		    	move the part_trans to <0 0 static height>;
		    end;
		end;
        part_mesh is to_translated_3ds_editable_mesh of translated_3ds_sphere;
        translated_3ds_sphere recycle;
	    part_mesh transform from part_trans;
	    editable_mesh add_editable_mesh_elements of part_mesh;
	    part_mesh recycle;
	    	
	    recycle;
		answer editable_mesh;
	end;	// get_collapsed
	
	
	//	
	// recycling methods
	//
	
	
	objective translated_3ds_oil_tank type question get is
		if some free_list then
		
			// get from free list
			//
			translated_3ds_oil_tank type next is free_list;
			free_list is its next;
			
			answer next;
		else
			// create new
			//
			answer new translated_3ds_oil_tank;
		end;
	end;	// get
	
	
	reference verb recycle is
	
		// add to free list
		//
		next is free_list;
		free_list is translated_3ds_oil_tank;
		
		translated_3ds_oil_tank is none;
	end;		// recycle	
end;    // translated_3ds_oil_tank


//
// procedural interface
//


shape translated_3ds_oil_tank with

	// geometry parameters
	//
    scalar radius = 1;
    scalar height = 2;
    scalar cap_height = .5;
	scalar blend = .25;
	
	// tessellation parameters
	//
	integer sides = 16;
	integer height_segments = 1;
	boolean smooth is true;
	
	// slicing parameters
	//
    boolean slice_on is false;
    scalar slice_from = 0;
    scalar slice_to = 0;
    
    // texturing parameters
    //
    boolean gen_mapping_coords is false;
        
    // additional parameters that
    // are not provided by 3DS Max
    //
    boolean capping is true;
    
    // modifier stack
    //
	translated_3ds_oil_tank type translated_3ds_oil_tank is translated_3ds_oil_tank type's get;
	modifier_stack push translated_3ds_stackable type translated_3ds_oil_tank;
is
	// set first entry in modifier stack to object
	//
	translated_3ds_oil_tank set with
	
		// set geometry parameters
		//
	    radius = static radius;
	    height = static height;
	    cap_height = static cap_height;
		blend = static blend;
		
		// set tessellation parameters
		//
		sides = static sides;
		height_segments = static height_segments;
		smooth is static smooth;
		
		// set slicing parameters
		//
	    slice_on is static slice_on;
	    slice_from = static slice_from;
	    slice_to = static slice_to;
	    
	    // set texturing parameters
	    //
	    gen_mapping_coords is static gen_mapping_coords;
	        
	    // set additional parameters that
	    // are not provided by 3DS Max
	    //
	    capping is static capping;
	end;
	
	// render
	//
	modifier_stack instance;
end;	// translated_3ds_oil_tank
