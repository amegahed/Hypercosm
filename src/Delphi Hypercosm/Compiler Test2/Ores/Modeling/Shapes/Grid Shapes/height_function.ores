{***************************************************************}
{ |\  /|												We Put  }
{ | >< Hypercosm	     height_function.ores			3d      }
{ |/  \|												To Work }
{***************************************************************}
{                                                               }
{       Contains a definition of shape in the form of a			}
{		height function.  A height function takes a 			}
{		mathematical function of x and y and computes a 		}
{		height field using the values of that function 			}
{		evaluated along the surface along x and y with			}
{		a height (z) of the value of the function.				}
{                                                               }
{***************************************************************}
{                Copyright (c) 2004 Hypercosm, LLC.             }
{***************************************************************}


include "system/grid_mesh.ores";


shape height_function
    using scalar question f
        at scalar x, y;
    end;    // f
with
	// geometry parameters
	//
    scalar x_center = 0, y_center = 0;
    scalar x_range = 1, y_range = 1;

	// tessellation parameters
	//
    integer h_steps = 8, v_steps = 8;
    boolean triangulate is false;
    boolean alternate is true;
    
    // rendering paramters
    //
    boolean smoothing is true;
    boolean one_sided is false;
    boolean reversed is false;
        
    // texturing parameters
    //
    boolean textured is true;
	texture_mapping type mapping is unit_parametric_mapping;  
is
	vector_grid type vertex_grid;
	
	// create vertex_grid
	//
    dim vertex_grid[1..v_steps, 1..h_steps];
    for integer v = min vertex_grid..max vertex_grid do
        for integer h = min vertex_grid[]..max vertex_grid[] do
            scalar x = ((h - 1) / (h_steps - 1)) * 2 - 1;
            scalar y = ((v - 1) / (v_steps - 1)) * 2 - 1;
            scalar x1 = x_center + (x / x_range);
            scalar y1 = y_center + (y / y_range);
            scalar z = f at x1 y1;
            
            vertex_grid[v, h] = <x y z>;
        end;
    end;

    // create mesh from grid of vertices
    //
    grid_mesh of vertex_grid with

        // tessellation parameters
        //
        triangulate is static triangulate;
        alternate is static alternate;
        
        // rendering parameters
        //
        smoothing is static smoothing;
        closed is static one_sided;
        reversed is static reversed;
        
        // texturing parameters
        //
        textured is static textured;
        mapping is static mapping;
    end;
end;    // height_function



