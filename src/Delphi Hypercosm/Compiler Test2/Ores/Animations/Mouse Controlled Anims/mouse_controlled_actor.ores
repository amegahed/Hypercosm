{***************************************************************}
{                           anims.ores                          }
{                       OMAR Resources (ORES)                   }
{***************************************************************}
{                                                               }
{       Contains standard animation subjects, which can be      }
{       used to animate objects using standard user             }
{       interactions.                                           }
{                                                               }
{***************************************************************}
{                Copyright (c) 2000 Hypercosm, Inc.             }
{***************************************************************}


include "system/time.ores";
include "system/args.ores";
include "system/check_keys.ores";
include "system/actors.ores";
include "system/interactions.ores";
include "system/trans_stacks.ores";
include "system/lighting.ores";


anim mouse_controlled_actor
	object type actor;
	in shape environment does none;
	around shape stationary_environment does default_lights;
	about vector point = lookat;
	doing verb action does check_keys;
	titled string type title is none;
with
	integer frames = 0;
	scalar max_time_step = 1;
	double_buffer is on;
is
    actable type actable is actable type actor;
	interaction type interaction about point;
	boolean done is false;
    
	picture actor_picture is
	
		// instantiate object
		//
		actable instance with
			trans = interaction's trans;
	    	actable act;
		end;

		// instantiate environment
		//
		if some environment then
			environment with
				trans = interaction's trans;
			end;
		end;

		if some stationary_environment then
			stationary_environment with
				trans = interaction's camera;
			end;
		end;
	end;	// actor_picture

	if some title then
		window_name is title;
	end;
	while not done do	
		actor_picture;
		
		// perform actions between frames
		//
		if some action then
			action;
		end;
		interaction update;
		if frames <> 0 then
			if frame_number > frames then
				done is true;
			end;		
		end; 
	end;
end;	// mouse_controlled_actor
