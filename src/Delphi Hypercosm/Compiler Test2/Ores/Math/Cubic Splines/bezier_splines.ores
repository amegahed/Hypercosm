{***************************************************************}
{ |\  /|												We Put  }
{ | >< Hypercosm        bezier_splines.ores	 			3d      }
{ |/  \|					    	  					To Work }
{***************************************************************}
{                                                               }
{			Contains bezier spline definition utilities.		}
{                                                               }
{***************************************************************}
{                Copyright (c) 2004 Hypercosm, LLC.             }
{***************************************************************}


include "system/polynomials.ores";
include "system/vpolynomials.ores";
include "system/combinatorics.ores";


scalar question get_bernstein_blend
	integer i;
	of degree integer n;
	at scalar t;
is
	answer (binomial_coefficient of n choose i) * (t ^ i) *
		(1 - t) ^ (n - i);
end;	// get_bernstein_blend


scalar[] question get_bernstein_blends
	of degree integer n;
	at scalar t;
is
	scalar blends[1 .. n];
	for integer counter = 1 .. n do
		blends[counter] = get_bernstein_blend counter of degree n at t;
	end;
	answer blends;
end;	// get_bernstein_blends


polynomial type question get_bezier_cubic
    using scalar s1, s2, s3, s4;
is
    polynomial type bezier_cubic;

    dim bezier_cubic[0..3];

    // find polynomial coefficients
    //
    bezier_cubic[3] = (s1 * -1) + (s2 * 3) + (s3 * -3) + (s4 * 1);
    bezier_cubic[2] = (s1 * 3) + (s2 * -6) + (s3 * 3);
    bezier_cubic[1] = (s1 * -3) + (s2 * 3);
    bezier_cubic[0] = (s1);

    answer bezier_cubic;
end;    // get_bezier_cubic


vpolynomial type question get_bezier_vcubic
    using vector v1, v2, v3, v4;
is
    vpolynomial type bezier_vcubic;

    dim bezier_vcubic[0..3];

    // find polynomial coefficients
    //
    bezier_vcubic[3] = (v1 * -1) + (v2 * 3) + (v3 * -3) + (v4 * 1);
    bezier_vcubic[2] = (v1 * 3) + (v2 * -6) + (v3 * 3);
    bezier_vcubic[1] = (v1 * -3) + (v2 * 3);
    bezier_vcubic[0] = (v1);

    answer bezier_vcubic;
end;    // get_bezier_vcubic
