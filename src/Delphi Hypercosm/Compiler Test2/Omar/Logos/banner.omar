{***************************************************************}
{                          banner.omar                          }
{          Object-Oriented Modelling and Rendering (OMAR)       }
{***************************************************************}
{                                                               }
{                                                               }
{***************************************************************}
{                Copyright (c) 2000 Hypercosm, Inc.             }
{***************************************************************}
do banner_anim;


include "system/native_noise.ores";
include "system/3d.ores";
include "system/actors.ores";
include "system/anims.ores";
include "system/meshes.ores";


subject banner
extends
    timed_actor
does
    verb new with
        scalar length = 1.5;
        scalar height = .5;
        integer steps = 10;
        integer lines = 8;
        vector attach_point = <-5 0 0>;
    end;
    shape instance;
has
    scalar length, height;
    integer steps, lines;
    vector attach_point;
is
    scalar s;
    material type banner_material is plastic textured new texture type
        using new image type named "help_wanted.jpg";


    verb new with
        scalar length = 1.5;
        scalar height = .5;
        integer steps = 10;
        integer lines = 8;
        vector attach_point = <-5 0 0>;
    is
        banner's length = length;
        banner's height = height;
        banner's steps = steps;
        banner's lines = lines;
        banner's attach_point = attach_point;
    end;    // new


    objective scalar question wavy_function
        at scalar x, y;
    is
        scalar noise1 = (noise2 (x * 2) (y * 2)) * 2 - 1;
        scalar noise2 = (noise2 (x - s * 2) ((y - s) * -2)) * 2 - 1;
        answer (noise1 + noise2) / 2;
    end;    // wavy_function


    objective shape form with
        integer steps = 10;
        scalar t = 0;
    is
        scalar x, y;

        s = t;
        height_function using wavy_function with
            h_steps = static steps;
            v_steps = static steps;
            x_center = t;
            triangulate is on;
        end;
    end;    // form


    shape attach_line at
        scalar x, y;
    with
        scalar t = 0;
    is
        scalar z = wavy_function at (x + t) y;

        line [attach_point <(x * length) y (z * height)>];
    end;    // attach_lines


    shape attach_lines with
        scalar t = 0;
    is
        for integer counter = 0 .. lines do
            scalar y = (counter / lines) * 2 - 1;

            attach_line at -1 y with
                t = static t;
            end;
        end;
    end;    // attach_lines


    shape instance is
        form with
            material is banner_material;
            t = time;
            scale by length along <1 0 0>;
            scale by height along <0 0 1>;
            steps = banner's steps;
            rotate by 90 around <1 0 0>;
        end;
        if lines <> 0 then
            attach_lines with
                t = time;
                // scale by length along <1 0 0>;
                // scale by height along <0 0 1>;
                rotate by 90 around <1 0 0>;
            end;
        end;
    end;    // instance
end;    // banner


anim banner_anim
    args type args;
with
    eye = <-2 -4 -1.5>;
    double_buffer is on;
    args check;
is
    banner type banner;

    mouse_controlled_actor banner;
end;    // banner_anim
