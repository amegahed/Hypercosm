{***************************************************************}
{                          saturn.omar                          }
{          Object-Oriented Modelling and Rendering (OMAR)       }
{***************************************************************}
{                                                               }
{                                                               }
{***************************************************************}
{                Copyright (c) 2000 Hypercosm, Inc.             }
{***************************************************************}
do moving_solar_system;


include "system/3d.ores";
include "system/check_keys.ores";
include "system/shaders.ores";
include "system/time.ores";


shape saturn is
    sphere with
        color = aqua;
    end;
    ring with
        color = yellow;
        normal = <.5 -.3 1>;
        inner_radius = 1.5;
        outer_radius = 2;
    end;
end;    // saturn


picture solar_system
    vector location1, location2;
is
    point_light with
        brightness = 12.5;
        move to location1;
    end;
    
    // star
    fiery sphere with
        magnify by 2;
        move to location1;
    end;

    // planet
    saturn with
        move to location2;
    end;
end;    // solar_system


anim moving_solar_system
    args type args;
with
    facets = 12;
    eye = <0 -50 20>;   // front view
    eye = <0 0 100>;    // top view
    field_of_view = 100;
    ambient = white * .1;
    double_buffer is on;
    background = black;
    args check;
is
    boolean done is false;
    vector v, acceleration;
    scalar k = 50;
    vector star_location1 = <-4 0 0>, star_velocity1 = <0 .5 0>;
    vector star_location2 = <10 0 0>, star_velocity2 = <0 -7 0>;
    vector star_location3 = <3 -25 8>, star_velocity3 = <5 0 0>;

    ring_color = <1 1 .5>;
    while not done do

        // compute star and planet attraction to each other
        //
        v = star_location2 - star_location1;
        acceleration = v * (k / (v dot v));
        star_velocity1 = itself + (acceleration / 10) * get_frame_duration;
        star_velocity2 = itself - acceleration * get_frame_duration;

        // compute third party's attraction to star
        //
        v = star_location3 - star_location1;
        acceleration = v * (k / (v dot v));
        star_velocity3 = itself - acceleration * get_frame_duration;
        star_location1 = itself + star_velocity1 * get_frame_duration;
        star_location2 = itself + star_velocity2 * get_frame_duration;
        star_location3 = itself + star_velocity3 * get_frame_duration;

        solar_system star_location1 star_location2 with
            eye = star_location3;

            // lookat = star_location1;     // look at sun
            // lookat = star_location2;     // look at planet

            // look between sun and planet
            lookat = (star_location1 + star_location2) / 2;
        end;
                check_keys;
    end;
end;    // moving_solar_system
