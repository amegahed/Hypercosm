{***************************************************************}
{                          dodecadesic.omar                     }
{          Object-Oriented Modelling and Rendering (OMAR)       }
{***************************************************************}
{                                                               }
{                                                               }
{***************************************************************}
{                Copyright (c) 2000 Hypercosm, Inc.             }
{***************************************************************}
do dodecadesic_anim;


include "system/3d.ores";
include "system/anims.ores";
include "system/random.ores";
include "system/platonics.ores";


shape dodecadesic with
    boolean unit_radius is true;
    integer level = 2;
    vector colors[];
is
    static vector vertices[] is dodecahedric type's vertices;
    static integer edges[][] is dodecahedric type's edges;
    static integer sides[][] is dodecahedric type's sides;


    shape triangles
        vector vertex1, vertex2, vertex3;
    with
        integer level = 1;
    is
        if level > 1 then
            scalar d = vlength of vertex1;
            vector vertex4 = normalized (vertex1 + vertex2) * d;
            vector vertex5 = normalized (vertex2 + vertex3) * d;
            vector vertex6 = normalized (vertex3 + vertex1) * d;

            // generate 4 subtriangular units
            //
            triangles vertex1 vertex4 vertex6 with
                level = static level - 1;
            end;
            triangles vertex4 vertex2 vertex5 with
                level = static level - 1;
            end;
            triangles vertex5 vertex3 vertex6 with
                level = static level - 1;
            end;
            triangles vertex4 vertex5 vertex6 with
                level = static level - 1;
            end;
        else
            // generate a single triangle
            //
            triangle vertex1 vertex2 vertex3;
        end;
    end;    // triangles


    shape pentagon
        vector vertices[1..5];
    is
        vector center = <0 0 0>;

        for integer counter = 1..5 do
            center = itself + vertices[counter];
        end;
        center = normalized center * vlength of vertices[1];

        triangles center vertices[1] vertices[2] with
            level = static level;
        end;
        triangles center vertices[2] vertices[3] with
            level = static level;
        end;
        triangles center vertices[3] vertices[4] with
            level = static level;
        end;
        triangles center vertices[4] vertices[5] with
            level = static level;
        end;
        triangles center vertices[5] vertices[1] with
            level = static level;
        end;
    end;    // pentagon


    shape pentagon_mesh is
        vector vertex1 = vertices[sides[1][1]];
        vector vertex2 = vertices[sides[1][2]];
        vector vertex3 = vertices[sides[1][3]];
        vector vertex4 = vertices[sides[1][4]];
        vector vertex5 = vertices[sides[1][5]];

        pentagon [vertex1 vertex2 vertex3 vertex4 vertex5];
    end;    // pentagon_mesh


    shape faces is
        vector mesh_vertex1 = vertices[sides[1][1]];
        vector mesh_vertex2 = vertices[sides[1][2]];
        vector mesh_vertex3 = vertices[sides[1][3]];

        for integer counter = min sides..max sides do
            vector vertex1 = vertices[sides[counter][1]];
            vector vertex2 = vertices[sides[counter][2]];
            vector vertex3 = vertices[sides[counter][3]];

            pentagon_mesh with
                orient3 from mesh_vertex1 mesh_vertex2
                    mesh_vertex3 to vertex1 vertex2
                    vertex3;
                color = colors[min colors + counter mod
                    num colors];
            end;
        end;
    end;    // faces

    // scale dodecadesic
    //
    if unit_radius then
        faces with
            magnify by 1 / dodecahedric type's radius;
        end;
    else
        faces;
    end;
end;    // dodecadesic


anim dodecadesic_anim
    args type args;
with
    eye = <1 -3 2>;
    double_buffer is on;
    args check;
is
    shape scene is
        dodecadesic with
            colors = [red green blue cyan magenta yellow];
        end;
    end;    // scene

    mouse_controlled_shape scene;
end;    // dedecadesic_anim
