{***************************************************************}
{                          intersect.omar                       }
{          Object-Oriented Modelling and Rendering (OMAR)       }
{***************************************************************}
{                                                               }
{                                                               }
{***************************************************************}
{                Copyright (c) 2000 Hypercosm, Inc.             }
{***************************************************************}
do intersect_anim;


include "system/3d.ores";
include "system/args.ores";
include "system/check_keys.ores";


picture intersect_picture
    vector location, orientation;
with
    eye = <0 -8 0>;
is
    distant_light from <.3 -.5 1>;
    cylinder with
        end1 = <-1.5 0 0>;
        end2 = <1.5 0 0>;
        radius = .5;
        rotate by (orientation dot <1 0 0>) around trans's x_axis;
        rotate by (orientation dot <0 0 1>) around -trans's z_axis;
        move to -location;
    end;
    block with

        {magnify by 1.5;}
        rotate by (orientation dot <1 0 0>) around -trans's x_axis;
        rotate by (orientation dot <0 0 1>) around trans's z_axis;
        move to location;
    end;
end;    // intersect_picture


anim intersect_anim
    args type args;
with
    double_buffer is on;
    render_mode is shaded;
    args check;
is
    vector old_mouse, new_mouse, delta;
    vector orientation = <0 0 0>, location = <0 0 0>;
    scalar dx, dy;

    old_mouse = get_mouse;
    while true do
        new_mouse = get_mouse;
        delta = new_mouse - old_mouse;
        old_mouse = new_mouse;
        dx = delta dot <1 0 0>;
        dy = delta dot <0 1 0>;
        if mouse_down button 1 then

            // move shape
            //
            location = location + (<dx 0 dy>) * 2;
        else

            // rotate shape
            //
            orientation = orientation + (<dy 0 dx>) * 360;
        end;

        // draw picture
        //
        intersect_picture location orientation;

        // check keyboard switches
        //
        check_keys;
    end;
end;    // intersect_anim
