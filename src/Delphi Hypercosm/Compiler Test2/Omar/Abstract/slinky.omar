{***************************************************************}
{                          slinky.omar                          }
{          Object-Oriented Modelling and Rendering (OMAR)       }
{***************************************************************}
{                                                               }
{                                                               }
{***************************************************************}
{                Copyright (c) 2000 Hypercosm, Inc.             }
{***************************************************************}
do slinky_anim;


include "system/3d.ores";
include "system/check_keys.ores";
include "system/time.ores";


shape slinky with
    scalar radius1 = 7;
    scalar radius2 = 7;
is
    scalar counter = 0;
    scalar x, y, z;
    scalar r, g, b;

    while counter < 360 do
        x = sin (counter * radius2 / 10) * radius1;
        y = cos (counter * radius1 / 2) * radius2;
        z = cos (counter * radius1 / 5) * radius1;
        r = sin counter;
        g = cos counter;
        b = .5;
        if (r < 0) then
            r = -r;
        end;
        if (g < 0) then
            g = -g;
        end;
        disk with
            color = <r g b>;
            center = <x y z>;
            normal = <x g y>;
        end;

        {
                cylinder with end1 = x y z; end2 = z y x; radius = r; end;
                }
        counter = counter + 3;
    end;
end;    // slinky


picture slinky_picture with
    scalar t1 = 1;
    scalar t2 = 1;
is
    distant_light from <.3 -.5 1>;
    slinky with
        radius1 = t1;
        radius2 = t2;
        rotate by t1 * 4 around <t2 1 0>;
    end;
end;    // slinky_picture


anim slinky_anim with
    eye = <10 -50 30>;
    facets = 2;
    double_buffer is on;
is
    timer type timer with
        ticks_per_second = 90;
    end;

    while true do
        eye = <(40 * cos timer position)
               (50 * sin timer position)
               (30 * cos (.8 * timer position))>;

        slinky_picture with
            t1 = (sin timer position) * 10;
            t2 = (cos (timer position * 1.5)) * 10;
        end;
        
        check_keys;
    end;
end;    // slinky_anim
