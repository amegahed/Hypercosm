{***************************************************************}
{ |\  /|                                                We Put  }
{ | >< Hypercosm          bubble_path.ores              3d      }
{ |/  \|                                                To Work }
{***************************************************************}
{                                                               }
{       Contains a standard subject for creating a path         }
{       behind a moving point in the form of expanding          }
{       undulating bubbles.                                     }
{                                                               }
{***************************************************************}
{                Copyright (c) 2004 Hypercosm, LLC.             }
{***************************************************************}

include "system/path.ores";
include "system/transformations.ores";
include "system/random.ores";

subject bubble_path
extends
	path
does
	// constructor
	//
	verb new
		at vector location = <0 0 0>;
	with
		integer steps = 10;
		scalar expansion_speed = 1;
		integer spacing = 5;
	end;    // new

	// animation method
	//
	verb step
		enum mode is absolute, relative;
		to vector location;
		in mode type mode is absolute;
	end;    // step

	// rendering method
	//
	shape instance;
has
	// attributes
	//
	scalar expansion_speed;
	integer spacing;
	integer step_counter = 0;
	scalar bubble_size[];
	integer bubble_lifetime[];
is
	//
	// constructor
	//
	
	verb new
		at vector location = <0 0 0>;
	with
		integer steps = 10;
		scalar expansion_speed = 1;
		integer spacing = 5;
	is
		// call superclass constructor
		//
		path new at location with
			steps = static steps;
		end;

		// init bubble path
		//
		dim bubble_size[0..steps];
		dim bubble_lifetime[0..steps];
		with bubble_path do
			its expansion_speed = expansion_speed;
			its spacing = spacing;
		end;

		// init bubble path arrays
		//
		for integer counter = 0..steps do
			bubble_size[counter] = 0;
			bubble_lifetime[counter] = 0;
		end;
	end;    // new

	//
	// animation methods
	//
	
	verb advance
		to vector location;
	is
		integer counter = steps;
		while counter > 0 do
			path_points[counter] = path_points[counter - 1];
			bubble_size[counter] = bubble_size[counter - 1];
			bubble_lifetime[counter] = bubble_lifetime[counter - 1];
			counter = itself - 1;
		end;
		path_points[0] = location;
		bubble_size[0] = random 0 to 1;
		bubble_lifetime[0] = trunc random 1 to steps;
	end;    // advance

	verb step
		enum mode is absolute, relative;
		to vector location;
		in mode type mode is absolute;
	is
		// advance path
		//
		if mode is relative then
			for integer counter = 0..steps do
				path_points[counter] = itself - location;
			end;
			location = <0 0 0>;
		end;

		// every n steps, a new wave is emitted
		//
		step_counter = itself + 1;
		if step_counter = spacing then
			advance to location;
			step_counter = 0;
		end;
	end;    // step

	//
	// rendering method
	//
	
	shape instance is
		scalar bubble_age;
		scalar radius = 0;
		edges is silhouette;
		color = white;
		for integer counter = 0..steps do
			if counter < bubble_lifetime[counter] then
				bubble_age = step_counter + counter * spacing;
				radius = bubble_age * bubble_size[counter] * expansion_speed;
				sphere with
					center = path_points[counter];
					radius = static radius;
				end;
			end;
		end;
	end;    // instance
end;    // bubble_path