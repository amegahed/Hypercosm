{***************************************************************}
{ |\  /|                                                We Put  }
{ | >< Hypercosm         3ds_rectangle.ores             3d      }
{ |/  \|                                                To Work }
{***************************************************************}
{                                                               }
{       Contains rectangle definitions that correspond to       }
{       entities from Discreet's 3D Studio Max software.        }
{                                                               }
{***************************************************************}
{                Copyright (c) 2004 Hypercosm, LLC.             }
{***************************************************************}

include "system/3ds_shape.ores";
include "system/3ds_editable_spline.ores";
include "system/3ds_modifier_stacks.ores";

subject translated_3ds_rectangle
extends
	translated_3ds_collapsable translated_3ds_shape
does
	// constructor
	//
	verb new with
	
		// geometry parameters
		//
		scalar width = 1;
		scalar length = 1;
		integer corner_radius = 0;
		
		// shape parameters
		//
		integer steps = 4;
		boolean optimize is false;
		boolean adaptive is false;
		boolean renderable is false;
		scalar thickness = 1; 
		
		// texturing parameters
		//
		boolean gen_mapping_coords is false;
	end;
	
	// setting method
	//
	verb set with
	
		// geometry parameters
		//
		scalar width = 1;
		scalar length = 1;
		integer corner_radius = 0;
		
		// shape parameters
		//
		integer steps = 4;
		boolean optimize is false;
		boolean adaptive is false;
		boolean renderable is false;
		scalar thickness = 1; 
		
		// texturing parameters
		//
		boolean gen_mapping_coords is false;
	end;
	
	// collapsing method
	//
	translated_3ds_stackable type question get_collapsed;
	
	// recycling methods
	//
	objective translated_3ds_rectangle type question get;
	reference verb recycle; 
has
	// attributes
	//
	scalar width;
	scalar length;
	integer corner_radius;
	
private 
	// recycling attributes
	//
	translated_3ds_rectangle type next is none;
is
	// recycling free list
	//
	translated_3ds_rectangle type free_list is none;
	
	//
	// constructor
	//
	
	verb new with
		// geometry parameters
		//
		scalar width = 1;
		scalar length = 1;
		integer corner_radius = 0;
		
		// shape parameters
		//
		integer steps = 4;
		boolean optimize is false;
		boolean adaptive is false;
		boolean renderable is false;
		scalar thickness = 1;
		
		// texturing parameters
		//
		boolean gen_mapping_coords is false;
	is
		translated_3ds_shape new with
		
			// set shape parameters
			//
			steps = static steps;
			optimize is static optimize;
			adaptive is static adaptive;
			renderable is static renderable;
			thickness = static thickness; 
			
			// set texturing parameters
			//
			gen_mapping_coords is static gen_mapping_coords;
		end;
		
		if verbose_recycling then
			write "new 3ds rectangle", ;
		end;
					
		with translated_3ds_rectangle do
		
			// set geometry attributes
			//
			its width = width;
			its length = length;
			its corner_radius = corner_radius;
		end;
	end;    // new
	
	//
	// setting method
	//
	
	verb set with
	
		// geometry parameters
		//
		scalar width = 1;
		scalar length = 1;
		integer corner_radius = 0;
		
		// shape parameters
		//
		integer steps = 4;
		boolean optimize is false;
		boolean adaptive is false;
		boolean renderable is false;
		scalar thickness = 1; 
		
		// texturing parameters
		//
		boolean gen_mapping_coords is false;
	is
		with translated_3ds_rectangle do
		
			// set geometry attributes
			//
			its width = width;
			its length = length;
			its corner_radius = corner_radius;
			
			// set shape parameters
			//
			its steps = steps;
			its optimize is optimize;
			its adaptive is adaptive;
			its renderable is renderable;
			its thickness = thickness; 
			
			// set texturing parameters
			//
			its gen_mapping_coords is gen_mapping_coords;
		end;  
	end;    // set
	
	//      
	// collapsing method
	//
	
	translated_3ds_stackable type question get_collapsed is
		translated_3ds_spline_vertices type vertices;
		translated_3ds_spline_segments type segments;
		translated_3ds_spline type spline is none;
		translated_3ds_splines type splines is none;
		translated_3ds_editable_spline type editable_spline is none;
		
		if corner_radius = 0 then
		
			// allocate vertex and segment arrays
			//
			dim none vertices[1 .. 4];
			dim none segments[1 .. 4];
					
			// create vertices
			//
			vertices[1] is translated_3ds_corner_vertex at <(-width / 2) (-length / 2) 0>;
			vertices[2] is translated_3ds_corner_vertex at <(width / 2) (-length / 2) 0>;
			vertices[3] is translated_3ds_corner_vertex at <(width / 2) (length / 2) 0>;
			vertices[4] is translated_3ds_corner_vertex at <(-width / 2) (length / 2) 0>;
			
			// create segments
			//
			for integer counter = 1 .. 4 do
				segments[counter] is translated_3ds_spline_segment type's get;
			end;
			segments[1] set line from vertices[1] to vertices[2];
			segments[2] set line from vertices[2] to vertices[3];
			segments[3] set line from vertices[3] to vertices[4];
			segments[4] set line from vertices[4] to vertices[1];
		else
			scalar w = width - corner_radius * 2;
			scalar l = length - corner_radius * 2;
			vector h_tangent = <(corner_radius / 2) 0 0>;
			vector v_tangent = <0 (corner_radius / 2) 0>;
			
			// allocate vertex and segment arrays
			//
			dim none vertices[1 .. 8];
			dim none segments[1 .. 8];
					
			// create vertices
			//
			vertices[1] is translated_3ds_bezier_vertex at <(-w / 2) (-length / 2) 0>
				from -h_tangent to h_tangent;
			vertices[2] is translated_3ds_bezier_vertex at <(w / 2) (-length / 2) 0>
				from -h_tangent to h_tangent;
			vertices[3] is translated_3ds_bezier_vertex at <(width / 2) (-l / 2) 0>
				from -v_tangent to v_tangent;
			vertices[4] is translated_3ds_bezier_vertex at <(width / 2) (l / 2) 0>
				from -v_tangent to v_tangent;
			vertices[5] is translated_3ds_bezier_vertex at <(w / 2) (length / 2) 0>
				from h_tangent to -h_tangent;
			vertices[6] is translated_3ds_bezier_vertex at <(-w / 2) (length / 2) 0>
				from h_tangent to -h_tangent;
			vertices[7] is translated_3ds_bezier_vertex at <(-width / 2) (l / 2) 0>
				from v_tangent to -v_tangent;
			vertices[8] is translated_3ds_bezier_vertex at <(-width / 2) (-l / 2) 0>
				from v_tangent to -v_tangent;
			
			// create segments
			//
			for integer counter = 1 .. 8 do
				segments[counter] is translated_3ds_spline_segment type's get;
			end;
			segments[1] set line from vertices[1] to vertices[2];
			segments[2] set curve from vertices[2] to vertices[3];
			segments[3] set line from vertices[3] to vertices[4];
			segments[4] set curve from vertices[4] to vertices[5];
			segments[5] set line from vertices[5] to vertices[6];
			segments[6] set curve from vertices[6] to vertices[7];
			segments[7] set line from vertices[7] to vertices[8];
			segments[8] set curve from vertices[8] to vertices[1];
		end;
		
		// create spline
		//
		spline is translated_3ds_spline type's get;
		spline append_vertices vertices;
		spline append_segments segments;
		
		// create splines
		//
		splines is [spline];
		
		// create editable spline
		//
		editable_spline is translated_3ds_editable_spline type's get;
		editable_spline set to splines with
		
			// set shape parameters
			//
			steps = static steps;
			optimize is static optimize;
			adaptive is static adaptive;
			renderable is static renderable;
			thickness = static thickness;
			
			// set texturing parameters
			//
			gen_mapping_coords is static gen_mapping_coords;
		end;
		
		recycle;                                
		answer editable_spline;
	end;    // get_collapsed
	
	//  
	// recycling methods
	//
	
	objective translated_3ds_rectangle type question get is
		if some free_list then
		
			// get from free list
			//
			translated_3ds_rectangle type next is free_list;
			free_list is its next;
			
			answer next;
		else
			// create new
			//
			answer new translated_3ds_rectangle;
		end;
	end;    // get
	
	reference verb recycle is
	
		// add to free list
		//
		next is free_list;
		free_list is translated_3ds_rectangle;
		
		translated_3ds_rectangle is none;
	end;        // recycle  
end;    // translated_3ds_rectangle

//
// procedural interface
//

shape translated_3ds_rectangle with

	// geometry parameters
	//
	scalar width = 1;
	scalar length = 1;
	integer corner_radius = 0;
	
	// shape parameters
	//
	integer steps = 4;
	boolean optimize is false;
	boolean adaptive is false;
	boolean renderable is false;
	scalar thickness = 1;
	
	// texturing parameters
	//
	boolean gen_mapping_coords is false;

	// modifier stack
	//
	translated_3ds_rectangle type translated_3ds_rectangle is translated_3ds_rectangle type's get;
	modifier_stack push translated_3ds_stackable type translated_3ds_rectangle;
is
	// set first entry in modifier stack to object
	//
	translated_3ds_rectangle set with
	
		// set geometry parameters
		//
		width = static width;
		length = static length;
		corner_radius = static corner_radius;

		// set shape parameters
		//
		steps = static steps;
		optimize is static optimize;
		adaptive is static adaptive;
		renderable is static renderable;
		thickness = static thickness;
		
		// set texturing parameters
		// 
		gen_mapping_coords is static gen_mapping_coords;
	end;
	
	// render
	//
	modifier_stack instance;
end;    // translated_3ds_rectangle