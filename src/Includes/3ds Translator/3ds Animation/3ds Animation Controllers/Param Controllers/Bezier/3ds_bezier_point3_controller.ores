{***************************************************************}
{ |\  /|                                                We Put  }
{ | >< Hypercosm   3ds_bezier_point3_controller.ores    3d      }
{ |/  \|                                                To Work }
{***************************************************************}
{                                                               }
{       Contains controller definitions that correspond to      }
{       entities from Discreet's 3D Studio Max software.        }
{                                                               }
{***************************************************************}
{                Copyright (c) 2004 Hypercosm, LLC.             }
{***************************************************************}

include "system/3ds_keys.ores";
include "system/3ds_bezier_point3_key.ores";
include "system/3ds_key_controller.ores";
include "system/3ds_point3_controlling.ores";
include "system/hermite_splines.ores";
include "system/arrows.ores";

subject translated_3ds_bezier_point3_controller 
extends
	translated_3ds_point3_controllable translated_3ds_key_controller
does
	// constructor
	//
	verb new
		of vector values[];
		from vector in_tangents[];
		to vector out_tangents[];
		at translated_3ds_time type times[];
	end;
	
	// getting methods
	//
	vector question get_value
		at translated_3ds_time type t;
	end;
	vector[][] question get_values with
		integer steps = 8;
	end;
	
	// rendering method
	//
	shape instance;
is
	//
	// objective querying methods
	//

	objective translated_3ds_keys type question bezier_point3_keys
		of vector values[];
		from vector in_tangents[];
		to vector out_tangents[];
		at translated_3ds_time type times[];
	is
		translated_3ds_keys type keys;
		
		// create array of keys
		//
		if some values then
			integer key_number = num values;
			dim none keys[1 .. key_number];
			for integer counter = 1 .. key_number do
				keys[counter] is new translated_3ds_bezier_point3_key
					of values[counter] from in_tangents[counter] to out_tangents[counter]
					at times[counter];
			end;
		end;
		
		answer keys;
	end;    // bezier_point3_keys
	
	//
	// constructor
	//

	verb new
		of vector values[];
		from vector in_tangents[];
		to vector out_tangents[];
		at translated_3ds_time type times[];
	is
		translated_3ds_key_controller new using bezier_point3_keys 
			of values from in_tangents to out_tangents at times;
	end;    // new
	
	//
	// getting methods
	//

	vector question get_value
		at translated_3ds_time type time;
	is
		translated_3ds_bezier_point3_key type prev_key is
			translated_3ds_bezier_point3_key type (keys get_prev at time);
		translated_3ds_bezier_point3_key type next_key is
			translated_3ds_bezier_point3_key type (keys get_next at time);
			
		if some prev_key and some next_key then
			vpolynomial type vpolynomial is get_hermite_vcubic
				from prev_key's value prev_key's out_tangent
				to next_key's value (-next_key's in_tangent);
			scalar duration = next_key's time - prev_key's time;
			scalar t = (time - prev_key's time) / duration;
			answer vpolynomial get_value at t;
		elseif some next_key then
			answer next_key's value;
		elseif some prev_key then
			answer prev_key's value;
		else
			answer <0 0 0>;
		end;
	end;    // get_value
	
	vector[][] question get_values with
		integer steps = 8;
	is
		vector values[1 .. num keys - 1][];
		
		for integer counter = 1 .. num keys - 1 do
			translated_3ds_bezier_point3_key type prev_key is 
				translated_3ds_bezier_point3_key type keys[counter];
			translated_3ds_bezier_point3_key type next_key is 
				translated_3ds_bezier_point3_key type keys[counter + 1];
			vpolynomial type vpolynomial is get_hermite_vcubic
				from prev_key's value prev_key's out_tangent
				to next_key's value (-next_key's in_tangent);
			values[counter] is vpolynomial get_values in steps;
		end;
		
		answer values;
	end;    // get_values
	
	//
	// rendering method
	//
	
	shape instance is
		vector[][] values is (get_values with
			steps = 8;
		);
		for integer counter = min values .. max values do
			line values[counter];
		end;
		
		for integer counter = 1 .. num keys do
			translated_3ds_bezier_point3_key type key is 
				translated_3ds_bezier_point3_key type keys[counter];
				
			vector in_tangent_handle = key's value + key's in_tangent / 3;
			vector out_tangent_handle = key's value + key's out_tangent / 3;
			scalar in_tangent_length = vlength of (key's in_tangent / 3);
			scalar out_tangent_length = vlength of (key's out_tangent / 3);
			
			arrow from key's value to in_tangent_handle with
				arrow_head_width = itself * in_tangent_length;
				color = red;
			end;
			arrow from key's value to out_tangent_handle with
				arrow_head_width = itself * out_tangent_length;
				color = green;
			end;
		end;
	end;    // instance
end;    // translated_3ds_bezier_point3_controller