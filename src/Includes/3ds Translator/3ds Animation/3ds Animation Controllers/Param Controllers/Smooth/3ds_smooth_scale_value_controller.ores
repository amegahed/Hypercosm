{***************************************************************}
{ |\  /|                                                We Put  }
{ | >< Hypercosm 3ds_smooth_scale_value_controller.ores 3d      }
{ |/  \|                                                To Work }
{***************************************************************}
{                                                               }
{       Contains controller definitions that correspond to      }
{       entities from Discreet's 3D Studio Max software.        }
{                                                               }
{***************************************************************}
{                Copyright (c) 2004 Hypercosm, LLC.             }
{***************************************************************}

include "system/3ds_bezier_scale_value_controller.ores";

subject translated_3ds_smooth_scale_value_controller 
extends
	translated_3ds_bezier_scale_value_controller
does
	// constructor
	//
	verb new
		of translated_3ds_scale_value type values[];
		at translated_3ds_time type times[];
	end;
is
	//
	// objective getting methods
	//

	objective translated_3ds_scale_value type[] question get_tangents
		of translated_3ds_scale_value type values[];
		at translated_3ds_time type times[];
	is
		translated_3ds_scale_value type tangents[min values .. max values];
		translated_3ds_scale_value type slopes[1 .. num values - 1];
			
		// compute slopes
		//
		for integer counter = 1 .. num values - 1 do
			vector dscaling = values[counter + 1]'s scaling - values[counter]'s scaling;
			vector dquatv = values[counter + 1]'s quat's v - values[counter]'s quat's v;
			scalar dquats = values[counter + 1]'s quat's s - values[counter]'s quat's s;
			scalar dx = times[counter + 1] - times[counter];
			slopes[counter]'s scaling = dscaling / dx;
			slopes[counter]'s quat's v = dquatv / dx;
			slopes[counter]'s quat's s = dquats / dx;
		end;
			
		// compute tangents
		//
		for integer counter = 1 .. num values do
			if counter = 1 then
				tangents[counter] = slopes[counter];
			elseif counter = num values then
				tangents[counter] = slopes[counter - 1];
			else
				tangents[counter]'s scaling = (slopes[counter - 1]'s scaling + 
					slopes[counter]'s scaling) / 2;
				tangents[counter]'s quat's v = (slopes[counter - 1]'s quat's v + 
					slopes[counter]'s quat's v) / 2;
				tangents[counter]'s quat's s = (slopes[counter - 1]'s quat's s + 
					slopes[counter]'s quat's s) / 2;
			end;
		end;
			
		answer tangents;
	end;    // get_tangents
	
	objective translated_3ds_scale_value type[] question get_flipped_tangents
		of translated_3ds_scale_value type tangents[];
	is
		translated_3ds_scale_value type flipped_tangents[min tangents .. max tangents];
		for integer counter = min tangents .. max tangents do
			flipped_tangents[counter]'s scaling = -tangents[counter]'s scaling;
			flipped_tangents[counter]'s quat's v = -tangents[counter]'s quat's v;
			flipped_tangents[counter]'s quat's s = -tangents[counter]'s quat's s;
		end;
		answer flipped_tangents;
	end;    // get_flipped_tangents
	
	//
	// constructor
	//
	
	verb new
		of translated_3ds_scale_value type values[];
		at translated_3ds_time type times[];
	is
		translated_3ds_scale_value type in_tangents[] is (get_tangents of values at times);
		translated_3ds_scale_value type out_tangents[] is (get_flipped_tangents of in_tangents);
		translated_3ds_bezier_scale_value_controller new  
			of values from in_tangents to out_tangents at times;
	end;    // new
end;    // translated_3ds_smooth_scale_value_controller