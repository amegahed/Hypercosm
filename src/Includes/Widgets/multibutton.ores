{***************************************************************}
{ |\  /|                                                We Put  }
{ | >< Hypercosm          multibutton.ores              3d      }
{ |/  \|                                                To Work }
{***************************************************************}
{                                                               }
{       Contains the multibutton widget subject, which can be   }
{       used to define hotspots in a textured parallelogram     }
{       that can act as buttons.                                }
{                                                               }
{***************************************************************}
{                Copyright (c) 2000 Hypercosm, Inc.             }
{***************************************************************}

include "anims.ores";

// The multibutton widget is primarily intended for defining button and
// mouse-over hotspot regions in a rectangular planar area.  The most
// likely use is for overlaying buttons on top of a texture or a region
// containing geometric representations of interactive objects.
//
// For an example usage, and a useful testbed for mapping the locations
// of your hotspot regions in your own texture, see the example OMAR file
// in OMAR/Widgets/multibutton.omar.
//
// To use the multibutton widget, first define a multibutton type variable.
// You will probably want to make the variable global or static so that it
// is created once and never goes away.  When you define the variable you
// can set it up to give a lot of useful debugging and development aid
// information.  For example, you can have it draw the outlines of the
// regions you define, and you can have it write out many pieces of
// information such as where the mouse is in the widget, and what region it
// is over.
//
// You then need to add your regions to the widget.  Once in the execution
// of your applet, call the 'add' method of the widget for each region.
// You can add rectangular, elliptical, and triangular regions.  For each
// region, you provide the type of region, the index that identifies the
// region (index 0 is reserved to mean that no region is selected), and the
// array of vertices that defines where the region is.  Vertices are in the
// form <x y 0> where x and y range from -1 to 1 over the width and height
// of the widget, respectively.  You can get vertex values by setting the
// write_position_over or the write_position_clicked parameters to true when
// you create the widget.
//
// For rectangular regions, the 'add' method takes an array of two vertices,
// defining two opposite corners of the region.  For elliptical regions, 'add'
// takes an array of two vertices defining the rectangle that encloses the
// ellipse.  For triangular regions, 'add' takes an array of three vertices.
//
// Be sure to only add your regions to the widget once.  If you define the
// widget variable to be a static variable inside your picture, use a static
// 'first_time' variable to make sure you only set up the regions once.
//
// You can add holes to a region by adding a region with index 0.  The mouse
// is tested against your regions in the opposite order in which the regions
// were added to the widget.  In other words, each time you add a region it
// is as if the region were placed "on top of" the other regions that had
// been added so far.
//
// The reset method clears the regions from the widget and resets the
// mouse_state object.  After calling reset you will need to add your regions
// again.
//
enum multibutton_region is rectangle, ellipse, triangle;

subject multibutton
extends
	mouse_state_filter object
does
	// constructor
	//
	verb new
	with
		// drawing mode
		//
		boolean draw_parallelogram is true;
		boolean draw_boundaries is false;
		color type outline_color = red;
		
		// output for development aid
		//
		boolean write_position_over is false;
		boolean write_position_clicked is false;
		boolean write_index_over is false;
		boolean write_index_clicked is false;
		boolean write_index_selected is false;
		
		// automatic override of global interactivity
		//
		boolean auto_override_interaction is true;
		cursor type override_cursor is arrow;
	end;
	
	verb add
		multibutton_region type kind;
		as integer index;
		at vector vertices[];
	end;
	
	verb reset;
	
	// querying methods
	//
	boolean question accept_click at vector location; end;
	boolean question in_region at vector location; end;

	// rendering method
	//
	shape instance;
has
	// attributes
	//
	public integer index_mouse_over = 0;
	public integer index_being_tracked = 0;
	public integer index_selected_this_frame = 0;
	public integer index_last_selected = 0;
	public integer index_clicked_this_frame = 0;
	public integer index_last_clicked = 0;
	
	public scalar last_click_time = 0;
	public scalar track_duration = 0;
	
	public mouse_state type mouse_state is none;    // allocated in new
	
	public boolean draw_parallelogram;
	public boolean draw_boundaries;
	public color type outline_color;
	
	public boolean write_position_over;
	public boolean write_position_clicked;
	public boolean write_index_over;
	public boolean write_index_clicked;
	public boolean write_index_selected;
	
	public boolean auto_override_interaction;
	public cursor type override_cursor;
	
	// private attributes
	//
	multibutton_region type kinds[] is none;
	integer indexes[] is none;
	vector vertices[][] is none;
is
	//
	// constructor
	//

	verb new
	with
		// drawing mode
		//
		boolean draw_parallelogram is true;
		boolean draw_boundaries is false;
		color type outline_color = red;
		
		// output for development aid
		//
		boolean write_position_over is false;
		boolean write_position_clicked is false;
		boolean write_index_over is false;
		boolean write_index_clicked is false;
		boolean write_index_selected is false;
		
		// automatic override of global interactivity
		//
		boolean auto_override_interaction is true;
		cursor type override_cursor is arrow;
	is
		multibutton's draw_parallelogram is draw_parallelogram;
		multibutton's draw_boundaries is draw_boundaries;
		multibutton's outline_color = outline_color;
		
		multibutton's write_position_over is write_position_over;
		multibutton's write_position_clicked is write_position_clicked;
		multibutton's write_index_over is write_index_over;
		multibutton's write_index_clicked is write_index_clicked;
		multibutton's write_index_selected is write_index_selected;
		
		multibutton's auto_override_interaction is auto_override_interaction;
		multibutton's override_cursor is override_cursor;
		mouse_state is (new mouse_state type with filter is multibutton;);
	end;    // new

	verb add
		multibutton_region type kind;
		as integer index;
		at vector vertices[];
	is
		vector vertices_copy[] is none;
		
		when kind is
			rectangle:
				if num vertices = 2 then
					dim vertices_copy[1 .. 2];
					vertices_copy = vertices;
				else
					write "multibutton rectangles must have two vertices",;
				end;
			end;
			
			ellipse:
				if num vertices = 2 then
					dim vertices_copy[1 .. 2];
					vertices_copy = vertices;
				else
					write "multibutton ellipses must have two vertices",;
				end;
			end;
			
			triangle:
				if num vertices = 3 then
					dim vertices_copy[1 .. 3];
					vertices_copy = vertices;
				else
					write "multibutton triangles must have three vertices",;
				end;
			end;
		else
			write "multibutton:  unknown multibutton_region kind",;
		end;
		
		if ((kind is rectangle) or (kind is ellipse)) and
		   some vertices_copy then

			// convert the coordinates that were provided into lower-left and
			// upper-right corners.
			//
			if vertices_copy[1].x > vertices_copy[2].x then
				scalar min_val = vertices_copy[2].x;
				scalar max_val = vertices_copy[1].x;
				vertices_copy[1].x = min_val;
				vertices_copy[2].x = max_val;
			end;
			
			if vertices_copy[1].y > vertices_copy[2].y then
				scalar min_val = vertices_copy[2].y;
				scalar max_val = vertices_copy[1].y;
				vertices_copy[1].y = min_val;
				vertices_copy[2].y = max_val;
			end;
		end;
		
		if some vertices_copy then
			integer num_kinds = num kinds;
			multibutton_region type new_kinds[1 .. (num_kinds + 1)];
			integer new_indexes[1 .. (num_kinds + 1)];
			vector new_vertices[1 .. (num_kinds + 1)][];
			
			for integer i = 1 .. num vertices_copy do
				vertices_copy[i].z = 0;
			end;
			
			for integer i = 1 .. num_kinds do
				new_kinds[i + 1] is kinds[i];
				new_indexes[i + 1] = indexes[i];
				new_vertices[i + 1] is multibutton's vertices[i];
			end;
			
			new_kinds[1] is kind;
			new_indexes[1] = index;
			new_vertices[1] is vertices_copy;
			
			kinds is new_kinds;
			indexes is new_indexes;
			multibutton's vertices is new_vertices;
		else
			write "    WARNING:  ignoring 'add' for region with index ", index,;
		end;
	end;    // add
	
	verb reset
	is
		kinds is none;
		indexes is none;
		vertices is none;
		
		index_mouse_over = 0;
		index_being_tracked = 0;
		index_selected_this_frame = 0;
		index_last_selected = 0;
		index_clicked_this_frame = 0;
		index_last_clicked = 0;
		
		last_click_time = 0;
		track_duration = 0;
		
		if some mouse_state then
			mouse_state reset;
		end;
	end;    // reset

	integer question get_index
		at vector location;
	with
		boolean write_position is false;
	is
		vector plane_location;
		scalar x, y;
		
		if not (xy_plane_touched at location with
					restrict_to_bounds is true;
					min_bounds = <(-1) (-1) 0>;
					max_bounds = <1 1 0>;
					return plane_location) then
			answer 0;
		end;
		
		x = plane_location.x;
		y = plane_location.y;
		
		if write_position then
			write "multibutton mouse position:  <", plane_location, ">",;
		end;
		
		if not some kinds then
			answer 0;
		end;
		
		for integer i = min kinds .. max kinds do
			when kinds[i] is
				rectangle:
					if (x >= vertices[i][1].x) and
					   (y >= vertices[i][1].y) and
					   (x <= vertices[i][2].x) and
					   (y <= vertices[i][2].y) then
						answer indexes[i];
					end;
				end;
				
				ellipse:
					scalar sx, sy;  // scaled to a unit sphere
					
					sx = ((x - vertices[i][1].x) * 2 /
						(vertices[i][2].x - vertices[i][1].x)) - 1;
					sy = ((y - vertices[i][1].y) * 2 /
						(vertices[i][2].y - vertices[i][1].y)) - 1;
					
					if ((sx * sx) + (sy * sy)) <= 1 then
						answer indexes[i];
					end;
				end;
				
				triangle:
					scalar u0, u1, u2;
					scalar v0, v1, v2;
					scalar alpha, beta;
					scalar det12;
					
					// Compute the barycentric coordinates of the
					// point in the triangle, and make sure they are
					// both >= 0 and they add up to <= 1.
					//
					u1 = vertices[i][2].x - vertices[i][1].x;
					v1 = vertices[i][2].y - vertices[i][1].y;
					u2 = vertices[i][3].x - vertices[i][1].x;
					v2 = vertices[i][3].y - vertices[i][1].y;
					
					det12 = (u1 * v2) - (u2 * v1);
					
					if det12 <> 0 then
						u0 = x - vertices[i][1].x;
						v0 = y - vertices[i][1].y;
						beta = -1;
						
						if u2 = 0 then
							alpha = u0 / u1;
							
							if (alpha >= 0) and (alpha <= 1) then
								beta = (v0 - (alpha * v1)) / v2;
							end;
						else
							alpha = ((u0 * v2) - (u2 * v0)) / det12;
							
							if (alpha >= 0) and (alpha <= 1) then
								beta = (u0 - (alpha * u1)) / u2;
							end;
						end;
						
						if (beta >= 0) and ((alpha + beta) <= 1) then
							answer indexes[i];
						end;
					end;
				end;
			end;
		end;
		
		answer 0;
	end;    // get_index

	//
	// querying methods
	//

	boolean question accept_click
		at vector location;
	is
		integer index;
		
		index = get_index at location with
			write_position is write_position_clicked;;
		
		if index <> 0 then
			index_being_tracked = index;
			index_clicked_this_frame = index;
			index_last_clicked = index;
			last_click_time = get_seconds;
			
			if write_index_clicked then
				write "multibutton element clicked:  ", index,;
			end;
			
			answer yes;
		else
			answer no;
		end;
	end;    // accept_click

	boolean question in_region
		at vector location;
	is
		integer index;
		
		if mouse_state's down then
			answer yes;
		else
			answer (get_index at location) <> 0;
		end;
	end;    // in_region

	//
	// rendering method
	//

	shape instance is
		scalar x;
		scalar y;
		boolean should_override;
		index_clicked_this_frame = 0;
		index_selected_this_frame = 0;
		
		if some mouse_state then
			mouse_state update;
			
			if (mouse_state was_released) and (index_being_tracked <> 0) then
				integer release_index =
					get_index at mouse_state's place_last_released;
				
				if release_index = index_being_tracked then
					index_selected_this_frame = release_index;
					index_last_selected = release_index;
					
					if write_index_selected then
						write "multibutton element selected:  ",
							release_index,;
					end;
				end;
				
				index_being_tracked = 0;
			end;
		end;
		
		if index_being_tracked <> 0 then
			track_duration = get_seconds - last_click_time;
		else
			track_duration = 0;
		end;
		index_mouse_over = (get_index at (get_mouse) with
			write_position is write_position_over;);
		
		if write_index_over and (index_mouse_over <> 0) then
			write "multibutton mouse over element:  ", index_mouse_over,;
		end;
		
		should_override is
			(index_mouse_over <> 0) or (index_being_tracked <> 0);
		
		if should_override and auto_override_interaction then
			if some current_interaction then
				if not current_interaction is_tracking then
					current_interaction override;
					set_cursor to override_cursor;
				end;
			else
				set_cursor to override_cursor;
			end;
		end;
		
		if draw_parallelogram then
			parallelogram;
		end;
		
		if draw_boundaries and some kinds then
			vector offset = <0 0 0.02>;
			
			for integer i = min kinds .. max kinds do
				when kinds[i] is
					rectangle:
						parallelogram with
							vertex = vertices[i][1] + offset;
							side1 =
								<(vertices[i][2].x - vertices[i][1].x) 0 0>;
							side2 =
								<0 (vertices[i][2].y - vertices[i][1].y) 0>;
							render_mode is wireframe;
							color = outline_color;
						end;
					end;
					
					ellipse:
						disk with
							center = ((vertices[i][1] + vertices[i][2]) / 2)
								+ offset;
							scale by
								((vertices[i][2].x - vertices[i][1].x) / 2)
								along <1 0 0> about center;
							scale by
								((vertices[i][2].y - vertices[i][1].y) / 2)
								along <0 1 0> about center;
							render_mode is wireframe;
							edges is silhouette;
							color = outline_color;
						end;
					end;
					
					triangle:
						triangle
							(vertices[i][1] + offset)
							(vertices[i][2] + offset)
							(vertices[i][3] + offset)
						with
							render_mode is wireframe;
							color = outline_color;
						end;
					end;
				end;
			end;
		end;
	end;    // instance
end;    // multibutton
