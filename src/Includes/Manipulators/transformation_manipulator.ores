{***************************************************************}
{ |\  /|                                                We Put  }
{ | >< Hypercosm    transformation_manipulator.ores     3d      }
{ |/  \|                                                To Work }
{***************************************************************}
{                                                               }
{       Contains a definition of an object for moving           }
{       objects using direct manipulation.                      }
{                                                               }
{***************************************************************}
{                Copyright (c) 2000 Hypercosm, Inc.             }
{***************************************************************}

include "system/translation_manipulator.ores";
include "system/rotation_manipulator.ores";

subject transformation_manipulator
extends
	shape_manipulator
does
	// constructor
	//
	verb new
		controlling shape target;
		bounded by shape bounding_shape does none;
	with
		scalar handle_size = default_handle_size;
		vector translation_snap = <0 0 0>, final_translation_snap = <0 0 0>;
		scalar rotation_snap = 0, final_rotation_snap = 90;
		scalar max_translation = 0;
	end;
	
	verb reset;
	verb deselect;

	// shape manipulator methods
	//
	shape handles
		of trans type trans;
	end;
	
	// touching methods
	//
	verb touch
		from vector location;
		towards vector direction;
	end;
	boolean question is_handle_touched
		from vector location;
		towards vector direction;
		closer than scalar reference min_t refers to none;
	end;   
		
	// pressing methods
	//
	verb press
		from vector location;
		towards vector direction;
	with
		boolean double_click is false;
	end;
	verb release
		from vector location;
		towards vector direction;
	end;
has     
	// attributes
	//
	public scalar handle_size;
	handle_state type xy_handle_states[1..2];
	handle_state type yz_handle_states[1..2];
	handle_state type xz_handle_states[1..2];
	handle_state type x_handle_states[1..4];
	handle_state type y_handle_states[1..4];
	handle_state type z_handle_states[1..4];
		
	// current translation attributes
	//
	plane type plane is none;
	vector translation;
	vector translation_snap, final_translation_snap;
	scalar max_translation;
	
	// current orientation attributes
	//
	axis type axis is none;
	scalar rotation;
	scalar rotation_snap, final_rotation_snap;
	vector cumulative_rotation;
	
	// reference attributes
	//
	manipulation_plane type manipulation_plane;
	trans type start_trans;
	scalar min_t;
is
	//
	// constructor
	//

	verb new
		controlling shape target;
		bounded by shape bounding_shape does none;
	with
		scalar handle_size = default_handle_size;
		vector translation_snap = <0 0 0>, final_translation_snap = <0 0 0>;
		scalar rotation_snap = 0, final_rotation_snap = 90;
		scalar max_translation = 0;
	is
		shape_manipulator new controlling target bounded by bounding_shape
			padded by <handle_size handle_size handle_size> / 2;
			
		with transformation_manipulator do
			its target does target;
			its bounding_shape does bounding_shape;
			its handle_size = handle_size;
			its translation_snap = translation_snap;
			its final_translation_snap = final_translation_snap;
			its max_translation = max_translation;
			its rotation_snap = rotation_snap;
			its final_rotation_snap = final_rotation_snap;
			its cumulative_rotation = <0 0 0>;
		end; 
	end;    // new
	
	verb reset is
		shape_manipulator static reset;
		cumulative_rotation = <0 0 0>;
	end;    // reset
 
	verb deselect_transformation is
		plane is none;
		axis is none;
	end;    // deselect_transformation
	
	verb deselect is
		manipulator static deselect;
		deselect_transformation;
	end;    // deselect
		  
	verb select_translation
		from vector location;
		towards vector direction; 
		closer than scalar reference min_t;
	is
		trans type trans;
		vector point, normal;
		
		objective shape xy_translation_target is     
			xy_translation_handles of trans with
				handle_size = static handle_size;
			end;
		end;
		objective shape yz_translation_target is
			yz_translation_handles of trans with
				handle_size = static handle_size;
			end;
		end;
		objective shape xz_translation_target is
			xz_translation_handles of trans with
				handle_size = static handle_size;
			end;
		end;
		
		// compute bounding trans
		//
		trans's origin = target_center;
		scaling the trans of target_size about target_center;  
		trans transform from relative_trans;
		 
		// find intersections using trans
		//    
		if ray_touches_shape xy_translation_target
			from location towards direction closer than min_t
			return at point towards normal
		then
			plane is xy_plane;
			manipulation_plane's origin = point;
			manipulation_plane's normal = -trans's z_axis;
		end;
		
		if ray_touches_shape yz_translation_target
			from location towards direction closer than min_t
			return at point towards normal
		then
			plane is yz_plane;
			manipulation_plane's origin = point;
			manipulation_plane's normal = -trans's x_axis;
		end;
			   
		if ray_touches_shape xz_translation_target
			from location towards direction closer than min_t
			return at point towards normal
		then
			plane is xz_plane;
			manipulation_plane's origin = point;
			manipulation_plane's normal = -trans's y_axis;
		end;
	end;    // select_translation
 
	verb select_rotation
		from vector location;
		towards vector direction;
		closer than scalar reference min_t;
	is
		trans type trans;
		
		objective shape x_rotation_target is
			x_rotation_handles of trans with
				handle_size = static handle_size;
			end;
		end;
		objective shape y_rotation_target is
			y_rotation_handles of trans with
				handle_size = static handle_size;
			end;
		end;
		objective shape z_rotation_target is
			z_rotation_handles of trans with
				handle_size = static handle_size;
			end;
		end;
		
		// compute bounding trans
		//
		trans's origin = target_center;
		scaling the trans of target_size about target_center;  
		trans transform from relative_trans;
		
		// find intersections using trans
		//           
		if ray_touches_shape x_rotation_target
			from location towards direction closer than min_t
		then
			axis is x_axis;
			manipulation_plane's origin = trans's origin;
			manipulation_plane's normal = trans's x_axis;
		end;
		
		if ray_touches_shape y_rotation_target
			from location towards direction closer than min_t
		then
			axis is y_axis;
			manipulation_plane's origin = trans's origin;
			manipulation_plane's normal = trans's y_axis;
		end;
		
		if ray_touches_shape z_rotation_target
			from location towards direction closer than min_t
		then
			axis is z_axis;
			manipulation_plane's origin = trans's origin;
			manipulation_plane's normal = trans's z_axis;
		end;
	end;    // select_rotation
	
	//
	// shape manipulator methods
	//
	
	shape translation_manipulator_handles
		of trans type trans;
	is
		// set handle states
		//                        
		if some plane then
			when plane is
				xy_plane:
					set_handle_states xy_handle_states to highlighted;
					set_handle_states yz_handle_states to hidden;
					set_handle_states xz_handle_states to hidden;
				end;
				yz_plane:
					set_handle_states xy_handle_states to hidden;
					set_handle_states yz_handle_states to highlighted;
					set_handle_states xz_handle_states to hidden;
				end;
				xz_plane:
					set_handle_states xy_handle_states to hidden;
					set_handle_states yz_handle_states to hidden;
					set_handle_states xz_handle_states to highlighted;
				end;
			end;
		else
			set_handle_states xy_handle_states to unselected;
			set_handle_states yz_handle_states to unselected;
			set_handle_states xz_handle_states to unselected;
		end;   
		
		translation_handles of trans with
			handle_size = static handle_size;
			xy_handle_states is static xy_handle_states;
			yz_handle_states is static yz_handle_states;
			xz_handle_states is static xz_handle_states;
		end;
	end;    // translation_manipulator_handles
	
	shape orientation_manipulator_handles
		of trans type trans;
	is
		// set handle states
		//
		if some axis then
			when axis is
				x_axis:
					set_handle_states x_handle_states to highlighted;
					set_handle_states y_handle_states to hidden; 
					set_handle_states z_handle_states to hidden; 
				end;
				
				y_axis:
					set_handle_states x_handle_states to hidden;
					set_handle_states y_handle_states to highlighted;
					set_handle_states z_handle_states to hidden;
				end;
				
				z_axis:
					set_handle_states x_handle_states to hidden;
					set_handle_states y_handle_states to hidden;
					set_handle_states z_handle_states to highlighted;
				end;
			end;
		else
			set_handle_states x_handle_states to unselected;        
			set_handle_states y_handle_states to unselected; 
			set_handle_states z_handle_states to unselected; 
		end; 
						   
		rotation_handles of trans with
			handle_size = static handle_size;
			x_handle_states is static x_handle_states;
			y_handle_states is static y_handle_states;
			z_handle_states is static z_handle_states;
		end;
	end;    // orientation_manipulator_handles
	
	shape handles
		of trans type trans;
	is
		if not some axis then
			translation_manipulator_handles of trans;
		end;
		if not some plane then
			orientation_manipulator_handles of trans;
		end;
	end;    // handles
	   
	verb manipulate
		from vector location;
		towards vector direction;
	is
		if some plane or some axis then
			manipulation_plane touch from location towards direction;
		end;
		
		if pressed then
			if some plane then
				translation = manipulation_plane's touch_point - manipulation_plane's press_point;
				if max_translation > 0 then
					if vlength of translation > max_translation then
						translation = normalized translation * max_translation;
					end;
				end;
				if translation_snap <> <0 0 0> then
					translation = vsnap translation to translation_snap;
				end;
				
				// update relative trans
				//
				relative_trans = start_trans;
				relative_trans's origin = itself + translation;
			end;
		
			if some axis then
				// compute new rotation angle
				//
				rotation = vangle2 from (manipulation_plane's press_point - relative_trans transformed target_center)
					to (manipulation_plane's touch_point - relative_trans transformed target_center)
					around manipulation_plane's normal;
				if rotation_snap <> 0 then
					rotation = snap rotation to rotation_snap;
				end;
				
				// update relative trans
				//
				relative_trans = start_trans;
				rotate the relative_trans by rotation around manipulation_plane's normal
					about relative_trans transformed target_center;
			end;
		end;  
	end;    // manipulate

	//
	// touching methods
	//
	  
	verb touch
		from vector location;
		towards vector direction;
	is
		if pressed then 
			manipulate from location towards direction;  
		elseif not mouse_down then
			min_t = infinity; 
			
			deselect_transformation;      
			touched is is_touched from location towards direction closer than min_t;
 
			if touched then
				min_t = infinity; 
					 
				select_translation from location towards direction closer than min_t;
				select_rotation from location towards direction closer than min_t;
				
				if some axis then
					plane is none;
				end;
				if some plane or some axis then
					if some current_interaction then
						current_interaction override;
					end;
				end;
			end;     
		end;
	end;    // touch
	
	boolean question is_handle_touched
		from vector location;
		towards vector direction;
		closer than scalar reference min_t refers to none;
	is
		if touched and some plane or some axis then
			if min_t refers to none then
				answer true;
			else
				if transformation_manipulator's min_t < min_t then
					min_t = transformation_manipulator's min_t;
					answer true;
				else
					answer false;
				end;
			end;
		else
			answer false;
		end;
	end;    // is_handle_touched
	
	//
	// pressing methods
	//
		 
	verb press
		from vector location;
		towards vector direction;
	with
		boolean double_click is false;
	is
		if double_click then
			if is_handle_touched from location towards direction then
				reset;
			end;
		else
			// activate selected manipulation
			//
			if some plane or some axis then
				pressed is true;
				start_trans = relative_trans;
				manipulation_plane press from location towards direction;
				translation = <0 0 0>;
				rotation = 0;
			end;
		end;
	end;    // press

	verb release
		from vector location;
		towards vector direction;
	is 
		// end translation
		//
		if pressed then
			if some plane then
				// update relative trans
				//
				relative_trans = start_trans;
				relative_trans's origin = itself + translation;
				if final_translation_snap <> <0 0 0> then
					relative_trans's origin = vsnap relative_trans's origin to final_translation_snap;
				end;
			end; 
		   
			// end rotation
			//
			if some axis then
				if final_rotation_snap <> 0 then
					rotation = snap rotation to final_rotation_snap;
				end;
				
				// add to cumulative rotation
				//
				when axis is
					x_axis:
						cumulative_rotation.x = itself + rotation;
					end;
					
					y_axis:
						cumulative_rotation.y = itself + rotation;
					end;
					
					z_axis:
						cumulative_rotation.z = itself + rotation;
					end;
				end;
				
				// update relative trans
				//
				relative_trans = start_trans;
				rotate the relative_trans by rotation around manipulation_plane's normal
					about relative_trans transformed target_center;
			end;
			
			pressed is false;
		end;
	end;    // release
end;    // transformation_manipulator