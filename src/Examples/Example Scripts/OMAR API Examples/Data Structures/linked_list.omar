{***************************************************************}
{ |\  /|                                                We Put  }
{ | >< Hypercosm          linked_list.omar              3d      }
{ |/  \|                                                To Work }
{***************************************************************}
{                                                               }
{       This is a simple example of how to use Hypercosm's      }
{       singly linked list utilities.                           }
{                                                               }
{***************************************************************}
{                Copyright (c) 2006 Hypercosm, LLC.             }
{***************************************************************}
do example;

include "system/printing.ores";
include "system/linked_list.ores";

subject thing
extends
	printable printing object
does
	// constructor
	//
	verb new with
		integer i = 0;
	end;    // new

	// converting method
	//
	string type question to_string;

	// printing method
	//
	verb print;
has
	// attributes
	//
	integer i;
is
	//
	// constructor
	//

	verb new with
		integer i = 0;
	is
		thing's i = i;
	end;    // new

	//
	// converting method
	//

	string type question to_string is
		answer integer_to_string of i;
	end;    // to_string

	//
	// printing method
	//

	verb print is
		write "i = ", to_string, ;
	end;    // print
end;    // thing

verb example is
	thing type thing1 with
		i = 5;
	end;
	thing type thing2 with
		i = 10;
	end;
	thing type thing3 with
		i = 15;
	end;
	thing type thing4 with
		i = 20;
	end;
	linked_list type list;
	list_iterator type iterator is none;

	list add thing1;
	list add thing2;
	list add thing3;
	
	write "list:", ;
	list print;
	write;
	
	write "lists number of items = ", list get_size, ;
	
	write "list's first element:", ;
	print list get_first;
	write;
	write "list after reversing list:", ;
	list reverse;
	list print;
	write;
	
	write "list after removing thing2:", ;
	list remove thing2;
	list print;
	write;
	
	write "list after adding thing2:", ;
	list add thing2;
	list print;
	write;
	
	write "list after inserting thing4 after thing1:", ;
	iterator is list get_list_iterator;
	while iterator has_next do
		if iterator next is thing1 then
			iterator insert_prev thing4;
		end;
	end;
	list print;
	write;
	
	write "list after removing thing4 after thing1:", ;
	iterator is list get_list_iterator;
	while iterator has_next do
		if iterator next is thing1 then
			iterator remove;
		end;
	end;
	list print;
	write;
	
	write "list after removing first:", ;
	list remove_first;
	list print;
	write;
	
	write "list after removing all:", ;
	list clear;
	list print;
	write;
	
	write "list after adding thing1:", ;
	list add thing1;
	list print;
	write;
end;    // example