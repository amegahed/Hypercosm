{***************************************************************}
{ |\  /|                                                We Put  }
{ | >< Hypercosm          block_parser.ores             3d      }
{ |/  \|                                                To Work }
{***************************************************************}
{                                                               }
{       This file contains a parser for parsing block           }
{       instances from an XML stream.                           }
{                                                               }
{***************************************************************}
{                Copyright (c) 2007 Hypercosm, LLC.             }
{***************************************************************}

include "system/xml_reading.ores";
include "block_instance.ores";
include "trans_parser.ores";
include "material_parser.ores";

block_instance type question parse_block
	from xml_reading type xml_reader;
is
	// 3ds block attributes
	//
	vector vertex = <-1 -1 -1>;
	vector side1 = <2 0 0>;
	vector side2 = <0 2 0>;
	vector side3 = <0 0 2>;
	trans type trans;
	material type material is none;
	// parse start element
	//      
	xml_reader require start_element named "block";
	
	// parse attributes
	//
	for integer counter = 1 .. xml_reader get_attribute_count do
		string type name is xml_reader get_attribute_name of counter;
		string type value is xml_reader get_attribute_value of counter;
		
		if name matches "vertex" then
			vertex = value to_vector;
		elseif name matches "side1" then
			side1 = value to_vector;
		elseif name matches "side2" then
			side2 = value to_vector;
		elseif name matches "side3" then
			side3 = value to_vector;
		end;
	end;
	xml_reader skip_element;
		
	// parse nested elements
	//
	while xml_reader is_ok and not xml_reader is_next end_element named "block" do
		// parse transformation
		//      
		if xml_reader is_next start_element named "trans" then
			parse_trans trans from xml_reader;
			
		// parse material
		//
		elseif xml_reader is_next start_element named "material" then
			material is parse_material from xml_reader;
			
		// skip unknown elements
		//
		else
			xml_reader skip_element;    
		end;
	end;
	// parse end element
	//          
	xml_reader require end_element named "block";
	xml_reader skip_element;
	// create and return block
	//
	answer (new block_instance with
		vertex = static vertex;
		side1 = static side1;
		side2 = static side2;
		side3 = static side3;
		trans = static trans;
		material is static material;
	);
end;    // parse_block
